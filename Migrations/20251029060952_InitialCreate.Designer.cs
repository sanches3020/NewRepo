// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sofia.Web.Data;

#nullable disable

namespace Sofia.Web.Migrations
{
    [DbContext(typeof(SofiaDbContext))]
    [Migration("20251029060952_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.10");

            modelBuilder.Entity("Sofia.Web.Models.EmotionEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("Emotion")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EmotionEntries");
                });

            modelBuilder.Entity("Sofia.Web.Models.Goal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFromPsychologist")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Progress")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("TargetDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Goals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 10, 29, 9, 9, 52, 384, DateTimeKind.Local).AddTicks(9534),
                            Date = new DateTime(2025, 10, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Выполнять хотя бы одну практику в день",
                            IsFromPsychologist = false,
                            Progress = 30,
                            Status = 1,
                            Title = "Ежедневные практики",
                            Type = "Wellness"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 10, 29, 9, 9, 52, 386, DateTimeKind.Local).AddTicks(2405),
                            Date = new DateTime(2025, 10, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Записывать мысли и эмоции каждый день",
                            IsFromPsychologist = false,
                            Progress = 60,
                            Status = 1,
                            Title = "Ведение дневника",
                            Type = "Personal"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 10, 29, 9, 9, 52, 386, DateTimeKind.Local).AddTicks(2408),
                            Date = new DateTime(2025, 10, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Применять техники КПТ при тревоге",
                            IsFromPsychologist = true,
                            Progress = 25,
                            Status = 1,
                            Title = "Работа с тревогой",
                            Type = "Therapy"
                        });
                });

            modelBuilder.Entity("Sofia.Web.Models.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Activity")
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("Emotion")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShareWithPsychologist")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tags")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("Sofia.Web.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActionText")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ActionUrl")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRead")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ScheduledAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Sofia.Web.Models.NotificationSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DailyReminder")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("DailyReminderTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailNotifications")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("GoalReminder")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("MoodCheckReminder")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("MoodCheckTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PracticeReminder")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PsychologistReminder")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PushNotifications")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("WeeklyReport")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WeeklyReportDay")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("NotificationSettings");
                });

            modelBuilder.Entity("Sofia.Web.Models.Practice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Instructions")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Practices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Breathing",
                            Description = "Техника успокоения через дыхание",
                            DurationMinutes = 5,
                            Instructions = "Вдох на 4 счета, задержка на 7, выдох на 8",
                            IsActive = true,
                            Name = "Дыхание 4-7-8"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Relaxation",
                            Description = "Постепенное расслабление мышц",
                            DurationMinutes = 15,
                            Instructions = "Напрягайте и расслабляйте каждую группу мышц",
                            IsActive = true,
                            Name = "Прогрессивная релаксация"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Visualization",
                            Description = "Создание мысленного убежища",
                            DurationMinutes = 10,
                            Instructions = "Представьте место, где чувствуете себя в безопасности",
                            IsActive = true,
                            Name = "Визуализация безопасного места"
                        },
                        new
                        {
                            Id = 4,
                            Category = "CBT",
                            Description = "Анализ и изменение негативных мыслей",
                            DurationMinutes = 20,
                            Instructions = "Запишите мысль, оцените её реалистичность, найдите альтернативу",
                            IsActive = true,
                            Name = "КПТ: Работа с мыслями"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Mindfulness",
                            Description = "Фокус на настоящем моменте",
                            DurationMinutes = 10,
                            Instructions = "Следите за дыханием, возвращайте внимание к настоящему",
                            IsActive = true,
                            Name = "Медитация осознанности"
                        });
                });

            modelBuilder.Entity("Sofia.Web.Models.Psychologist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Education")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Experience")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Languages")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Methods")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("PricePerHour")
                        .HasColumnType("TEXT");

                    b.Property<string>("Specialization")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Psychologists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContactEmail = "anna.petrova@psychology.ru",
                            ContactPhone = "+7 (495) 123-45-67",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Опытный психолог с 8-летним стажем",
                            Education = "МГУ",
                            Experience = "8 лет",
                            IsActive = true,
                            Languages = "Русский, английский",
                            Methods = "КПТ, осознанность",
                            Name = "Анна Петрова",
                            PricePerHour = 3000m,
                            Specialization = "КПТ, тревожные расстройства"
                        },
                        new
                        {
                            Id = 2,
                            ContactEmail = "mikhail.sokolov@family-psych.ru",
                            ContactPhone = "+7 (812) 234-56-78",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "12 лет опыта",
                            Education = "СПбГУ",
                            Experience = "12 лет",
                            IsActive = true,
                            Languages = "Русский, французский",
                            Methods = "Системный подход",
                            Name = "Михаил Соколов",
                            PricePerHour = 4000m,
                            Specialization = "Семейная терапия"
                        },
                        new
                        {
                            Id = 3,
                            ContactEmail = "elena.volkova@trauma-therapy.ru",
                            ContactPhone = "+7 (495) 345-67-89",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "10 лет опыта",
                            Education = "МГПУ",
                            Experience = "10 лет",
                            IsActive = true,
                            Languages = "Русский, немецкий",
                            Methods = "EMDR, соматика",
                            Name = "Елена Волкова",
                            PricePerHour = 5000m,
                            Specialization = "EMDR терапия"
                        });
                });

            modelBuilder.Entity("Sofia.Web.Models.PsychologistAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("PsychologistId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PsychologistId");

                    b.HasIndex("UserId");

                    b.ToTable("PsychologistAppointments");
                });

            modelBuilder.Entity("Sofia.Web.Models.PsychologistReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("PsychologistId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PsychologistId");

                    b.ToTable("PsychologistReviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Отличный специалист!",
                            CreatedAt = new DateTime(2024, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PsychologistId = 1,
                            Rating = 5
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Профессиональный подход",
                            CreatedAt = new DateTime(2024, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PsychologistId = 1,
                            Rating = 4
                        },
                        new
                        {
                            Id = 3,
                            Comment = "Помог решить семейные проблемы",
                            CreatedAt = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PsychologistId = 2,
                            Rating = 5
                        },
                        new
                        {
                            Id = 4,
                            Comment = "EMDR терапия действительно работает",
                            CreatedAt = new DateTime(2024, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PsychologistId = 3,
                            Rating = 5
                        });
                });

            modelBuilder.Entity("Sofia.Web.Models.PsychologistSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PsychologistId")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PsychologistId");

                    b.ToTable("PsychologistSchedules");
                });

            modelBuilder.Entity("Sofia.Web.Models.PsychologistTimeSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BookedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PsychologistId")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BookedByUserId");

                    b.HasIndex("PsychologistId");

                    b.ToTable("PsychologistTimeSlots");
                });

            modelBuilder.Entity("Sofia.Web.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Bio")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("PsychologistProfileId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Sofia.Web.Models.EmotionEntry", b =>
                {
                    b.HasOne("Sofia.Web.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sofia.Web.Models.Goal", b =>
                {
                    b.HasOne("Sofia.Web.Models.User", "User")
                        .WithMany("Goals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sofia.Web.Models.Note", b =>
                {
                    b.HasOne("Sofia.Web.Models.User", "User")
                        .WithMany("Notes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sofia.Web.Models.Psychologist", b =>
                {
                    b.HasOne("Sofia.Web.Models.User", "User")
                        .WithOne("PsychologistProfile")
                        .HasForeignKey("Sofia.Web.Models.Psychologist", "UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sofia.Web.Models.PsychologistAppointment", b =>
                {
                    b.HasOne("Sofia.Web.Models.Psychologist", "Psychologist")
                        .WithMany("Appointments")
                        .HasForeignKey("PsychologistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sofia.Web.Models.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Psychologist");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sofia.Web.Models.PsychologistReview", b =>
                {
                    b.HasOne("Sofia.Web.Models.Psychologist", "Psychologist")
                        .WithMany("Reviews")
                        .HasForeignKey("PsychologistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Psychologist");
                });

            modelBuilder.Entity("Sofia.Web.Models.PsychologistSchedule", b =>
                {
                    b.HasOne("Sofia.Web.Models.Psychologist", "Psychologist")
                        .WithMany("Schedules")
                        .HasForeignKey("PsychologistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Psychologist");
                });

            modelBuilder.Entity("Sofia.Web.Models.PsychologistTimeSlot", b =>
                {
                    b.HasOne("Sofia.Web.Models.User", "BookedByUser")
                        .WithMany()
                        .HasForeignKey("BookedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Sofia.Web.Models.Psychologist", "Psychologist")
                        .WithMany("TimeSlots")
                        .HasForeignKey("PsychologistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookedByUser");

                    b.Navigation("Psychologist");
                });

            modelBuilder.Entity("Sofia.Web.Models.Psychologist", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Reviews");

                    b.Navigation("Schedules");

                    b.Navigation("TimeSlots");
                });

            modelBuilder.Entity("Sofia.Web.Models.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Goals");

                    b.Navigation("Notes");

                    b.Navigation("PsychologistProfile");
                });
#pragma warning restore 612, 618
        }
    }
}
