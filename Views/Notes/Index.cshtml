@model IEnumerable<Sofia.Web.Models.Note>
@{
    ViewData["Title"] = "–ó–∞–º–µ—Ç–∫–∏ –∏ —ç–º–æ—Ü–∏–∏";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2>–ó–∞–º–µ—Ç–∫–∏ –∏ —ç–º–æ—Ü–∏–∏</h2>
    <a href="/notes/create" class="btn btn-primary">
        <i class="bi bi-plus-circle me-1"></i>–ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞
    </a>
</div>

@if (!Model.Any())
{
    <div class="text-center py-5">
        <div class="mb-3" style="font-size: 48px;">üìù</div>
        <h4 class="text-muted">–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫</h4>
        <p class="text-muted">–ù–∞—á–Ω–∏—Ç–µ –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ —Å–≤–æ–∏—Ö –º—ã—Å–ª–µ–π –∏ —ç–º–æ—Ü–∏–π</p>
        <a href="/notes/create" class="btn btn-primary">–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–º–µ—Ç–∫—É</a>
    </div>
}
else
{
    <!-- Filters and Search -->
    <div class="card mb-4">
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-4">
                    <input type="text" id="searchInput" class="form-control" placeholder="üîç –ü–æ–∏—Å–∫ –ø–æ –∑–∞–º–µ—Ç–∫–∞–º...">
                </div>
                <div class="col-md-3">
                    <select id="emotionFilter" class="form-select">
                        <option value="">–í—Å–µ —ç–º–æ—Ü–∏–∏</option>
                        <option value="VeryHappy">üòÑ –û—á–µ–Ω—å —Ä–∞–¥–æ—Å—Ç–Ω–æ</option>
                        <option value="Happy">üòä –†–∞–¥–æ—Å—Ç–Ω–æ</option>
                        <option value="Neutral">üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ</option>
                        <option value="Sad">üòî –ì—Ä—É—Å—Ç–Ω–æ</option>
                        <option value="VerySad">üò¢ –û—á–µ–Ω—å –≥—Ä—É—Å—Ç–Ω–æ</option>
                        <option value="Anxious">üò∞ –¢—Ä–µ–≤–æ–∂–Ω–æ</option>
                        <option value="Calm">üòå –°–ø–æ–∫–æ–π–Ω–æ</option>
                        <option value="Excited">ü§© –í–∑–≤–æ–ª–Ω–æ–≤–∞–Ω–Ω–æ</option>
                        <option value="Frustrated">üò§ –†–∞–∑–¥—Ä–∞–∂—ë–Ω–Ω–æ</option>
                        <option value="Grateful">üôè –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <select id="sortSelect" class="form-select">
                        <option value="date-desc">üìÖ –ù–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞</option>
                        <option value="date-asc">üìÖ –°—Ç–∞—Ä—ã–µ —Å–Ω–∞—á–∞–ª–∞</option>
                        <option value="emotion">üé≠ –ü–æ —ç–º–æ—Ü–∏—è–º</option>
                        <option value="pinned">üìå –ó–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–µ</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <button id="clearFilters" class="btn btn-outline-secondary w-100">üßπ –°–±—Ä–æ—Å</button>
                </div>
            </div>
        </div>
    </div>

    <div class="row g-3" id="notesContainer">
        @foreach (var note in Model)
        {
            <div class="col-12 col-md-6 col-lg-4 note-card" data-note-id="@note.Id" data-emotion="@note.Emotion" data-pinned="@note.IsPinned" data-content="@note.Content.ToLower()" data-tags="@(note.Tags?.ToLower() ?? "")">
                <div class="card h-100 @(note.IsPinned ? "border-warning pinned-card" : "")">
                    @if (note.IsPinned)
                    {
                        <div class="card-header bg-warning bg-opacity-10 d-flex justify-content-between align-items-center">
                            <small class="text-warning fw-bold">üìå –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–æ</small>
                            <small class="text-muted">@note.CreatedAt.ToString("dd.MM.yyyy")</small>
                        </div>
                    }
                    else
                    {
                        <div class="card-header bg-transparent d-flex justify-content-between align-items-center">
                            <small class="text-muted">@note.CreatedAt.ToString("dd.MM.yyyy HH:mm")</small>
                        </div>
                    }

                    <div class="card-body">
                        <div class="d-flex align-items-center mb-2">
                            <span class="me-2 emotion-icon">@GetEmotionEmoji(note.Emotion)</span>
                            <span class="badge bg-secondary emotion-badge">@note.Emotion.ToString()</span>
                            @if (note.ShareWithPsychologist)
                            {
                                <span class="badge bg-info ms-2">üë• –ü—Å–∏—Ö–æ–ª–æ–≥</span>
                            }
                        </div>

                        <p class="card-text note-content">@(note.Content.Length > 150 ? note.Content.Substring(0, 150) + "..." : note.Content)</p>

                        @if (!string.IsNullOrEmpty(note.Tags))
                        {
                            <div class="mb-2 tags-container">
                                @foreach (var tag in note.Tags.Split(',', StringSplitOptions.RemoveEmptyEntries))
                                {
                                    <span class="badge bg-light text-dark me-1 tag-badge">#@tag.Trim()</span>
                                }
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(note.Activity))
                        {
                            <small class="text-muted activity-text">üèÉ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: @note.Activity</small>
                        }
                    </div>

                    <div class="card-footer bg-transparent d-flex justify-content-between">
                        <div>
                            <a href="/notes/edit/@note.Id" class="btn btn-sm btn-outline-primary edit-btn" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</a>
                            <form method="post" action="/notes/toggle-pin/@note.Id" class="d-inline">
                                <button type="submit" class="btn btn-sm btn-outline-warning pin-btn" title="–ó–∞–∫—Ä–µ–ø–∏—Ç—å/–æ—Ç–∫—Ä–µ–ø–∏—Ç—å">üìå</button>
                            </form>
                        </div>
                        <form method="post" action="/notes/delete/@note.Id" class="d-inline" onsubmit="return confirm('–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É?')">
                            <button type="submit" class="btn btn-sm btn-outline-danger delete-btn" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
                        </form>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Pagination -->
    <nav aria-label="–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∑–∞–º–µ—Ç–∫–∞–º" class="mt-4">
        <ul class="pagination justify-content-center" id="paginationContainer">
            <!-- Pagination will be generated by JavaScript -->
        </ul>
    </nav>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Enhanced Notes Management
            const NotesManager = {
                notesContainer: document.getElementById('notesContainer'),
                searchInput: document.getElementById('searchInput'),
                emotionFilter: document.getElementById('emotionFilter'),
                sortSelect: document.getElementById('sortSelect'),
                clearFilters: document.getElementById('clearFilters'),
                paginationContainer: document.getElementById('paginationContainer'),
                notesPerPage: 12,
                currentPage: 1,

                init() {
                    this.bindEvents();
                    this.updateDisplay();
                },

                bindEvents() {
                    // Search functionality
                    this.searchInput?.addEventListener('input', this.debounce(() => {
                        this.currentPage = 1;
                        this.updateDisplay();
                    }, 300));

                    // Filter functionality
                    this.emotionFilter?.addEventListener('change', () => {
                        this.currentPage = 1;
                        this.updateDisplay();
                    });

                    // Sort functionality
                    this.sortSelect?.addEventListener('change', () => {
                        this.currentPage = 1;
                        this.updateDisplay();
                    });

                    // Clear filters
                    this.clearFilters?.addEventListener('click', () => {
                        this.searchInput.value = '';
                        this.emotionFilter.value = '';
                        this.sortSelect.value = 'date-desc';
                        this.currentPage = 1;
                        this.updateDisplay();
                    });

                    // Companion reactions for note actions
                    const createButton = document.querySelector('a[href="/notes/create"]');
                    if (createButton) {
                        createButton.addEventListener('click', function() {
                            if (Math.random() < 0.5) {
                                if (window.sofiaCompanion) {
                                    const messages = [
                                        "–û—Ç–ª–∏—á–Ω–æ! –ó–∞–ø–∏—Å—ã–≤–∞–π —Å–≤–æ–∏ –º—ã—Å–ª–∏! üìù",
                                        "–í—Ä–µ–º—è –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏! ‚ú®",
                                        "–ü–æ–¥–µ–ª–∏—Å—å —Ç–µ–º, —á—Ç–æ —É —Ç–µ–±—è –Ω–∞ –¥—É—à–µ! üí≠"
                                    ];
                                    const randomMessage = messages[Math.floor(Math.random() * messages.length)];
                                    window.sofiaCompanion.showMessage(randomMessage);
                                }
                            }
                        });
                    }

                    // Enhanced companion interactions
                    this.bindCompanionInteractions();
                },

                bindCompanionInteractions() {
                    // React to emotion badges with enhanced logic
                    document.addEventListener('mouseenter', (e) => {
                        if (e.target.classList.contains('emotion-badge') && Math.random() < 0.3) {
                            if (window.sofiaCompanion) {
                                const emotion = e.target.textContent.toLowerCase();
                                let message = "";

                                if (emotion.includes('happy') || emotion.includes('–æ—á–µ–Ω—å —Å—á–∞—Å—Ç–ª–∏–≤')) {
                                    message = "–†–∞–¥–∞, —á—Ç–æ —Ç—ã —Å—á–∞—Å—Ç–ª–∏–≤! üòä";
                                } else if (emotion.includes('sad') || emotion.includes('–≥—Ä—É—Å—Ç–Ω')) {
                                    message = "–ü–æ–Ω–∏–º–∞—é, —á—Ç–æ –≥—Ä—É—Å—Ç–Ω–æ. –Ø –∑–¥–µ—Å—å! ü§ó";
                                } else if (emotion.includes('anxious') || emotion.includes('—Ç—Ä–µ–≤–æ–∂–Ω')) {
                                    message = "–î—ã—à–∏ –≥–ª—É–±–æ–∫–æ, –≤—Å—ë –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ! üå∏";
                                } else if (emotion.includes('calm') || emotion.includes('—Å–ø–æ–∫–æ–µ–Ω')) {
                                    message = "–û—Ç–ª–∏—á–Ω–æ! –°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ - —ç—Ç–æ —Å–∏–ª–∞! üßò‚Äç‚ôÄÔ∏è";
                                } else if (emotion.includes('grateful') || emotion.includes('–±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω')) {
                                    message = "–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å - –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ —á—É–≤—Å—Ç–≤–æ! üôè";
                                }

                                if (message) {
                                    window.sofiaCompanion.showMessage(message);
                                }
                            }
                        }
                    }, true);

                    // React to note cards with better logic
                    document.addEventListener('mouseenter', (e) => {
                        const card = e.target.closest('.note-card');
                        if (card && Math.random() < 0.2) {
                            if (window.sofiaCompanion) {
                                const messages = [
                                    "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –∑–∞–ø–∏—Å—å! üìñ",
                                    "–•–æ—Ä–æ—à–æ, —á—Ç–æ —Ç—ã —ç—Ç–æ –∑–∞–ø–∏—Å–∞–ª! ‚úçÔ∏è",
                                    "–í–∞–∂–Ω—ã–µ –º—ã—Å–ª–∏! üí≠",
                                    "–¢–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞ –≤–∞–∂–Ω—ã! üíù"
                                ];
                                const randomMessage = messages[Math.floor(Math.random() * messages.length)];
                                window.sofiaCompanion.showMessage(randomMessage);
                            }
                        }
                    });
                },

                debounce(func, wait) {
                    let timeout;
                    return function executedFunction(...args) {
                        const later = () => {
                            clearTimeout(timeout);
                            func(...args);
                        };
                        clearTimeout(timeout);
                        timeout = setTimeout(later, wait);
                    };
                },

                updateDisplay() {
                    const allNotes = Array.from(document.querySelectorAll('.note-card'));
                    const filteredNotes = this.filterNotes(allNotes);
                    const sortedNotes = this.sortNotes(filteredNotes);
                    const paginatedNotes = this.paginateNotes(sortedNotes);

                    this.renderNotes(paginatedNotes);
                    this.renderPagination(sortedNotes.length);
                },

                filterNotes(notes) {
                    const searchTerm = this.searchInput?.value.toLowerCase() || '';
                    const emotionFilter = this.emotionFilter?.value || '';

                    return notes.filter(note => {
                        const matchesSearch = !searchTerm ||
                            note.dataset.content.includes(searchTerm) ||
                            note.dataset.tags.includes(searchTerm);

                        const matchesEmotion = !emotionFilter ||
                            note.dataset.emotion === emotionFilter;

                        return matchesSearch && matchesEmotion;
                    });
                },

                sortNotes(notes) {
                    const sortBy = this.sortSelect?.value || 'date-desc';

                    return notes.sort((a, b) => {
                        switch (sortBy) {
                            case 'date-asc':
                                return new Date(a.querySelector('.text-muted').textContent) -
                                       new Date(b.querySelector('.text-muted').textContent);
                            case 'date-desc':
                                return new Date(b.querySelector('.text-muted').textContent) -
                                       new Date(a.querySelector('.text-muted').textContent);
                            case 'emotion':
                                return a.dataset.emotion.localeCompare(b.dataset.emotion);
                            case 'pinned':
                                return (b.dataset.pinned === 'true' ? 1 : 0) -
                                       (a.dataset.pinned === 'true' ? 1 : 0);
                            default:
                                return 0;
                        }
                    });
                },

                paginateNotes(notes) {
                    const start = (this.currentPage - 1) * this.notesPerPage;
                    const end = start + this.notesPerPage;
                    return notes.slice(start, end);
                },

                renderNotes(notes) {
                    // Hide all notes first
                    document.querySelectorAll('.note-card').forEach(note => {
                        note.style.display = 'none';
                    });

                    // Show only current page notes
                    notes.forEach(note => {
                        note.style.display = 'block';
                    });
                },

                renderPagination(totalNotes) {
                    const totalPages = Math.ceil(totalNotes / this.notesPerPage);

                    if (totalPages <= 1) {
                        this.paginationContainer.innerHTML = '';
                        return;
                    }

                    let paginationHtml = '';

                    // Previous button
                    paginationHtml += `<li class="page-item ${this.currentPage === 1 ? 'disabled' : ''}">
                        <a class="page-link" href="#" onclick="NotesManager.goToPage(${this.currentPage - 1})">–ü—Ä–µ–¥—ã–¥—É—â–∞—è</a>
                    </li>`;

                    // Page numbers
                    for (let i = 1; i <= totalPages; i++) {
                        if (i === this.currentPage ||
                            i === 1 ||
                            i === totalPages ||
                            (i >= this.currentPage - 1 && i <= this.currentPage + 1)) {
                            paginationHtml += `<li class="page-item ${i === this.currentPage ? 'active' : ''}">
                                <a class="page-link" href="#" onclick="NotesManager.goToPage(${i})">${i}</a>
                            </li>`;
                        } else if (i === this.currentPage - 2 || i === this.currentPage + 2) {
                            paginationHtml += '<li class="page-item disabled"><span class="page-link">...</span></li>';
                        }
                    }

                    // Next button
                    paginationHtml += `<li class="page-item ${this.currentPage === totalPages ? 'disabled' : ''}">
                        <a class="page-link" href="#" onclick="NotesManager.goToPage(${this.currentPage + 1})">–°–ª–µ–¥—É—é—â–∞—è</a>
                    </li>`;

                    this.paginationContainer.innerHTML = paginationHtml;
                },

                goToPage(page) {
                    if (page >= 1 && page <= Math.ceil(document.querySelectorAll('.note-card').length / this.notesPerPage)) {
                        this.currentPage = page;
                        this.updateDisplay();
                        window.scrollTo({ top: 0, behavior: 'smooth' });
                    }
                }
            };

            // Initialize notes manager
            window.NotesManager = NotesManager;
            NotesManager.init();

            // Track note creation for achievements
            const noteCards = document.querySelectorAll('.note-card');
            if (noteCards.length > 0) {
                setTimeout(() => {
                    if (typeof onNoteCreated === 'function') {
                        onNoteCreated();
                    }
                }, 1000);
            }
        });
    </script>
}

@functions {
    string GetEmotionEmoji(Sofia.Web.Models.EmotionType emotion)
    {
        return emotion switch
        {
            Sofia.Web.Models.EmotionType.VerySad => "üò¢",
            Sofia.Web.Models.EmotionType.Sad => "üòî",
            Sofia.Web.Models.EmotionType.Neutral => "üòê",
            Sofia.Web.Models.EmotionType.Happy => "üòä",
            Sofia.Web.Models.EmotionType.VeryHappy => "üòÑ",
            Sofia.Web.Models.EmotionType.Anxious => "üò∞",
            Sofia.Web.Models.EmotionType.Calm => "üòå",
            Sofia.Web.Models.EmotionType.Excited => "ü§©",
            Sofia.Web.Models.EmotionType.Frustrated => "üò§",
            Sofia.Web.Models.EmotionType.Grateful => "üôè",
            _ => "üòê"
        };
    }
}


