@model IEnumerable<Sofia.Web.Models.Note>
@{
    ViewData["Title"] = "–ó–∞–º–µ—Ç–∫–∏ –∏ —ç–º–æ—Ü–∏–∏";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2>–ó–∞–º–µ—Ç–∫–∏ –∏ —ç–º–æ—Ü–∏–∏</h2>
    <a href="/notes/create" class="btn btn-primary">
        <i class="bi bi-plus-circle me-1"></i>–ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞
    </a>
</div>

@if (!Model.Any())
{
    <div class="text-center py-5">
        <div class="mb-3" style="font-size: 48px;">üìù</div>
        <h4 class="text-muted">–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫</h4>
        <p class="text-muted">–ù–∞—á–Ω–∏—Ç–µ –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ —Å–≤–æ–∏—Ö –º—ã—Å–ª–µ–π –∏ —ç–º–æ—Ü–∏–π</p>
        <a href="/notes/create" class="btn btn-primary">–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–º–µ—Ç–∫—É</a>
    </div>
}
else
{
    <div class="row g-3">
        @foreach (var note in Model)
        {
            <div class="col-12 col-md-6 col-lg-4">
                <div class="card h-100 @(note.IsPinned ? "border-warning" : "")">
                    @if (note.IsPinned)
                    {
                        <div class="card-header bg-warning bg-opacity-10 d-flex justify-content-between align-items-center">
                            <small class="text-warning fw-bold">üìå –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–æ</small>
                            <small class="text-muted">@note.CreatedAt.ToString("dd.MM.yyyy")</small>
                        </div>
                    }
                    else
                    {
                        <div class="card-header bg-transparent d-flex justify-content-between align-items-center">
                            <small class="text-muted">@note.CreatedAt.ToString("dd.MM.yyyy HH:mm")</small>
                        </div>
                    }
                    
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-2">
                            <span class="me-2">@GetEmotionEmoji(note.Emotion)</span>
                            <span class="badge bg-secondary">@note.Emotion.ToString()</span>
                            @if (note.ShareWithPsychologist)
                            {
                                <span class="badge bg-info ms-2">üë• –ü—Å–∏—Ö–æ–ª–æ–≥</span>
                            }
                        </div>
                        
                        <p class="card-text">@(note.Content.Length > 150 ? note.Content.Substring(0, 150) + "..." : note.Content)</p>
                        
                        @if (!string.IsNullOrEmpty(note.Tags))
                        {
                            <div class="mb-2">
                                @foreach (var tag in note.Tags.Split(',', StringSplitOptions.RemoveEmptyEntries))
                                {
                                    <span class="badge bg-light text-dark me-1">#@tag.Trim()</span>
                                }
                            </div>
                        }
                        
                        @if (!string.IsNullOrEmpty(note.Activity))
                        {
                            <small class="text-muted">–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: @note.Activity</small>
                        }
                    </div>
                    
                    <div class="card-footer bg-transparent d-flex justify-content-between">
                        <div>
                            <a href="/notes/edit/@note.Id" class="btn btn-sm btn-outline-primary">‚úèÔ∏è</a>
                            <form method="post" action="/notes/toggle-pin/@note.Id" class="d-inline">
                                <button type="submit" class="btn btn-sm btn-outline-warning">üìå</button>
                            </form>
                        </div>
                        <form method="post" action="/notes/delete/@note.Id" class="d-inline" onsubmit="return confirm('–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É?')">
                            <button type="submit" class="btn btn-sm btn-outline-danger">üóëÔ∏è</button>
                        </form>
                    </div>
                </div>
            </div>
        }
    </div>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Companion reactions for note actions
            const createButton = document.querySelector('a[href="/notes/create"]');
            if (createButton) {
                createButton.addEventListener('click', function() {
                    if (Math.random() < 0.5) { // 50% chance
                        if (window.sofiaCompanion) {
                            const messages = [
                                "–û—Ç–ª–∏—á–Ω–æ! –ó–∞–ø–∏—Å—ã–≤–∞–π —Å–≤–æ–∏ –º—ã—Å–ª–∏! üìù",
                                "–í—Ä–µ–º—è –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏! ‚ú®",
                                "–ü–æ–¥–µ–ª–∏—Å—å —Ç–µ–º, —á—Ç–æ —É —Ç–µ–±—è –Ω–∞ –¥—É—à–µ! üí≠"
                            ];
                            const randomMessage = messages[Math.floor(Math.random() * messages.length)];
                            window.sofiaCompanion.showMessage(randomMessage);
                        }
                    }
                });
            }
            
            // Track note creation for achievements
            const noteCards = document.querySelectorAll('.card');
            if (noteCards.length > 0) {
                // Simulate note creation for demo purposes
                setTimeout(() => {
                    onNoteCreated();
                }, 1000);
            }
            
            // React to emotion badges
            const emotionBadges = document.querySelectorAll('.badge');
            emotionBadges.forEach(badge => {
                badge.addEventListener('mouseenter', function() {
                    if (Math.random() < 0.2) { // 20% chance
                        if (window.sofiaCompanion) {
                            const emotion = this.textContent.toLowerCase();
                            let message = "";
                            
                            if (emotion.includes('happy') || emotion.includes('–æ—á–µ–Ω—å —Å—á–∞—Å—Ç–ª–∏–≤')) {
                                message = "–†–∞–¥–∞, —á—Ç–æ —Ç—ã —Å—á–∞—Å—Ç–ª–∏–≤! üòä";
                            } else if (emotion.includes('sad') || emotion.includes('–≥—Ä—É—Å—Ç–Ω')) {
                                message = "–ü–æ–Ω–∏–º–∞—é, —á—Ç–æ –≥—Ä—É—Å—Ç–Ω–æ. –Ø –∑–¥–µ—Å—å! ü§ó";
                            } else if (emotion.includes('anxious') || emotion.includes('—Ç—Ä–µ–≤–æ–∂–Ω')) {
                                message = "–î—ã—à–∏ –≥–ª—É–±–æ–∫–æ, –≤—Å—ë –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ! üå∏";
                            } else if (emotion.includes('calm') || emotion.includes('—Å–ø–æ–∫–æ–µ–Ω')) {
                                message = "–û—Ç–ª–∏—á–Ω–æ! –°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ - —ç—Ç–æ —Å–∏–ª–∞! üßò‚Äç‚ôÄÔ∏è";
                            } else if (emotion.includes('grateful') || emotion.includes('–±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω')) {
                                message = "–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å - –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ —á—É–≤—Å—Ç–≤–æ! üôè";
                            }
                            
                            if (message) {
                                window.sofiaCompanion.showMessage(message);
                            }
                        }
                    }
                });
            });
            
            // React to note cards
            const noteCards = document.querySelectorAll('.card');
            noteCards.forEach(card => {
                card.addEventListener('mouseenter', function() {
                    if (Math.random() < 0.15) { // 15% chance
                        if (window.sofiaCompanion) {
                            const messages = [
                                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –∑–∞–ø–∏—Å—å! üìñ",
                                "–•–æ—Ä–æ—à–æ, —á—Ç–æ —Ç—ã —ç—Ç–æ –∑–∞–ø–∏—Å–∞–ª! ‚úçÔ∏è",
                                "–í–∞–∂–Ω—ã–µ –º—ã—Å–ª–∏! üí≠"
                            ];
                            const randomMessage = messages[Math.floor(Math.random() * messages.length)];
                            window.sofiaCompanion.showMessage(randomMessage);
                        }
                    }
                });
            });
        });
    </script>
}

@functions {
    string GetEmotionEmoji(Sofia.Web.Models.EmotionType emotion)
    {
        return emotion switch
        {
            Sofia.Web.Models.EmotionType.VerySad => "üò¢",
            Sofia.Web.Models.EmotionType.Sad => "üòî",
            Sofia.Web.Models.EmotionType.Neutral => "üòê",
            Sofia.Web.Models.EmotionType.Happy => "üòä",
            Sofia.Web.Models.EmotionType.VeryHappy => "üòÑ",
            Sofia.Web.Models.EmotionType.Anxious => "üò∞",
            Sofia.Web.Models.EmotionType.Calm => "üòå",
            Sofia.Web.Models.EmotionType.Excited => "ü§©",
            Sofia.Web.Models.EmotionType.Frustrated => "üò§",
            Sofia.Web.Models.EmotionType.Grateful => "üôè",
            _ => "üòê"
        };
    }
}


