@model IEnumerable<Sofia.Web.Models.Practice>
@{
    ViewData["Title"] = "–ü—Ä–∞–∫—Ç–∏–∫–∏ –∏ –º–µ–¥–∏—Ç–∞—Ü–∏–∏";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2>–ü—Ä–∞–∫—Ç–∏–∫–∏ –∏ –º–µ–¥–∏—Ç–∞—Ü–∏–∏</h2>
</div>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<!-- Filters -->
<div class="card mb-4">
    <div class="card-body">
        <form method="get" class="row g-3">
            <div class="col-md-4">
                <label class="form-label">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</label>
                <select name="category" class="form-select" onchange="this.form.submit()">
                    <option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
                    @foreach (var cat in ViewBag.Categories)
                    {
                        <option value="@cat" selected="@(ViewBag.SelectedCategory == cat.ToString())">
                            @GetCategoryEmoji(cat) @GetCategoryName(cat)
                        </option>
                    }
                </select>
            </div>
            <div class="col-md-4">
                <label class="form-label">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</label>
                <select name="duration" class="form-select" onchange="this.form.submit()">
                    <option value="">–õ—é–±–∞—è</option>
                    <option value="5" selected="@(ViewBag.SelectedDuration == 5)">–î–æ 5 –º–∏–Ω—É—Ç</option>
                    <option value="10" selected="@(ViewBag.SelectedDuration == 10)">–î–æ 10 –º–∏–Ω—É—Ç</option>
                    <option value="15" selected="@(ViewBag.SelectedDuration == 15)">–î–æ 15 –º–∏–Ω—É—Ç</option>
                    <option value="20" selected="@(ViewBag.SelectedDuration == 20)">–î–æ 20 –º–∏–Ω—É—Ç</option>
                </select>
            </div>
            <div class="col-md-4 d-flex align-items-end">
                <button type="submit" class="btn btn-primary me-2">–ü—Ä–∏–º–µ–Ω–∏—Ç—å</button>
                <a href="/practices" class="btn btn-outline-secondary">–°–±—Ä–æ—Å–∏—Ç—å</a>
            </div>
        </form>
    </div>
</div>

@if (!Model.Any())
{
    <div class="text-center py-5">
        <div class="mb-3" style="font-size: 48px;">üßò</div>
        <h4 class="text-muted">–ü—Ä–∞–∫—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h4>
        <p class="text-muted">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞</p>
    </div>
}
else
{
    <div class="row g-3">
        @foreach (var practice in Model)
        {
            <div class="col-12 col-md-6 col-lg-4">
                <div class="card h-100">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <span class="badge bg-primary">@GetCategoryEmoji(practice.Category) @GetCategoryName(practice.Category)</span>
                        <small class="text-muted">‚è±Ô∏è @practice.DurationMinutes –º–∏–Ω</small>
                    </div>
                    
                    <div class="card-body">
                        <h5 class="card-title">@practice.Name</h5>
                        <p class="card-text">@practice.Description</p>
                        
                        @if (!string.IsNullOrEmpty(practice.Instructions))
                        {
                            <div class="mt-3">
                                <small class="text-muted fw-bold">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</small>
                                <p class="small text-muted">@practice.Instructions</p>
                            </div>
                        }
                    </div>
                    
                    <div class="card-footer bg-transparent">
                        <div class="d-flex justify-content-between">
                            <a href="/practices/details/@practice.Id" class="btn btn-outline-primary btn-sm">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>
                            <form method="post" action="/practices/start/@practice.Id" class="d-inline">
                                <button type="submit" class="btn btn-primary btn-sm">‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å</button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@functions {
    string GetCategoryEmoji(Sofia.Web.Models.PracticeCategory category)
    {
        return category switch
        {
            Sofia.Web.Models.PracticeCategory.Breathing => "ü´Å",
            Sofia.Web.Models.PracticeCategory.Visualization => "üåÖ",
            Sofia.Web.Models.PracticeCategory.CBT => "üß†",
            Sofia.Web.Models.PracticeCategory.Gestalt => "üé≠",
            Sofia.Web.Models.PracticeCategory.Meditation => "üßò",
            Sofia.Web.Models.PracticeCategory.Mindfulness => "üå±",
            Sofia.Web.Models.PracticeCategory.Relaxation => "üòå",
            _ => "üßò"
        };
    }
    
    string GetCategoryName(Sofia.Web.Models.PracticeCategory category)
    {
        return category switch
        {
            Sofia.Web.Models.PracticeCategory.Breathing => "–î—ã—Ö–∞–Ω–∏–µ",
            Sofia.Web.Models.PracticeCategory.Visualization => "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è",
            Sofia.Web.Models.PracticeCategory.CBT => "–ö–ü–¢",
            Sofia.Web.Models.PracticeCategory.Gestalt => "–ì–µ—à—Ç–∞–ª—å—Ç",
            Sofia.Web.Models.PracticeCategory.Meditation => "–ú–µ–¥–∏—Ç–∞—Ü–∏—è",
            Sofia.Web.Models.PracticeCategory.Mindfulness => "–û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å",
            Sofia.Web.Models.PracticeCategory.Relaxation => "–†–µ–ª–∞–∫—Å–∞—Ü–∏—è",
            _ => category.ToString()
        };
    }
}


