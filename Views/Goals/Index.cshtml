@model IEnumerable<Sofia.Web.Models.Goal>
@{
    ViewData["Title"] = "–¶–µ–ª–∏";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2>–¶–µ–ª–∏</h2>
    <a href="/goals/create" class="btn btn-primary">
        <i class="bi bi-plus-circle me-1"></i>–ù–æ–≤–∞—è —Ü–µ–ª—å
    </a>
</div>

@if (!Model.Any())
{
    <div class="text-center py-5">
        <div class="mb-3" style="font-size: 48px;">üéØ</div>
        <h4 class="text-muted">–ü–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–µ–π</h4>
        <p class="text-muted">–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é —Ü–µ–ª—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞</p>
        <a href="/goals/create" class="btn btn-primary">–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é —Ü–µ–ª—å</a>
    </div>
}
else
{
    <div class="row g-3">
        @foreach (var goal in Model)
        {
            <div class="col-12 col-md-6 col-lg-4">
                <div class="card h-100 @GetStatusClass(goal.Status)">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <div class="d-flex align-items-center">
                            <span class="me-2">@GetTypeEmoji(goal.Type)</span>
                            <span class="badge @GetStatusBadgeClass(goal.Status)">@GetStatusText(goal.Status)</span>
                        </div>
                        @if (goal.IsFromPsychologist)
                        {
                            <span class="badge bg-info">üë• –ü—Å–∏—Ö–æ–ª–æ–≥</span>
                        }
                    </div>
                    
                    <div class="card-body">
                        <h5 class="card-title">@goal.Title</h5>
                        @if (!string.IsNullOrEmpty(goal.Description))
                        {
                            <p class="card-text">@goal.Description</p>
                        }
                        
                        <div class="mb-3">
                            <div class="d-flex justify-content-between mb-1">
                                <small class="text-muted">–ü—Ä–æ–≥—Ä–µ—Å—Å</small>
                                <small class="text-muted">@goal.Progress%</small>
                            </div>
                            <div class="progress" style="height: 8px;">
                                <div class="progress-bar @GetProgressBarClass(goal.Status)" 
                                     role="progressbar" 
                                     style="width: @goal.Progress%" 
                                     aria-valuenow="@goal.Progress" 
                                     aria-valuemin="0" 
                                     aria-valuemax="100">
                                </div>
                            </div>
                        </div>
                        
                        <div class="small text-muted">
                            <div>üìÖ –°–æ–∑–¥–∞–Ω–æ: @goal.CreatedAt.ToString("dd.MM.yyyy")</div>
                            @if (goal.TargetDate.HasValue)
                            {
                                <div>üéØ –¶–µ–ª—å –¥–æ: @goal.TargetDate.Value.ToString("dd.MM.yyyy")</div>
                            }
                        </div>
                    </div>
                    
                    <div class="card-footer bg-transparent">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <a href="/goals/edit/@goal.Id" class="btn btn-sm btn-outline-primary">‚úèÔ∏è</a>
                                <form method="post" action="/goals/delete/@goal.Id" class="d-inline" onsubmit="return confirm('–£–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å?')">
                                    <button type="submit" class="btn btn-sm btn-outline-danger">üóëÔ∏è</button>
                                </form>
                            </div>
                            @if (goal.Status == Sofia.Web.Models.GoalStatus.Active)
                            {
                                <form method="post" action="/goals/update-progress/@goal.Id" class="d-inline">
                                    <div class="input-group input-group-sm" style="width: 120px;">
                                        <input type="number" name="progress" class="form-control" min="0" max="100" value="@goal.Progress" />
                                        <button type="submit" class="btn btn-outline-success">‚úì</button>
                                    </div>
                                </form>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Companion reactions for goal actions
            const createButton = document.querySelector('a[href="/goals/create"]');
            if (createButton) {
                createButton.addEventListener('click', function() {
                    if (Math.random() < 0.6) { // 60% chance
                        if (window.sofiaCompanion) {
                            const messages = [
                                "–û—Ç–ª–∏—á–Ω–æ! –°—Ç–∞–≤—å —Ü–µ–ª–∏ –∏ –¥–æ—Å—Ç–∏–≥–∞–π –∏—Ö! üéØ",
                                "–¶–µ–ª–∏ - —ç—Ç–æ –ø—É—Ç—å –∫ —É—Å–ø–µ—Ö—É! ‚≠ê",
                                "–ü–ª–∞–Ω–∏—Ä—É–π –∏ –¥–æ—Å—Ç–∏–≥–∞–π! üí™"
                            ];
                            const randomMessage = messages[Math.floor(Math.random() * messages.length)];
                            window.sofiaCompanion.showMessage(randomMessage);
                        }
                    }
                    // Track goal creation
                    onGoalCreated();
                });
            }
            
            // React to progress updates
            const progressInputs = document.querySelectorAll('input[name="progress"]');
            progressInputs.forEach(input => {
                input.addEventListener('change', function() {
                    const progress = parseInt(this.value);
                    if (window.sofiaCompanion) {
                        let message = "";
                        
                        if (progress >= 100) {
                            message = "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞! üéâüéä";
                            celebrateCompanion();
                            onGoalCompleted();
                        } else if (progress >= 75) {
                            message = "–ü–æ—á—Ç–∏ —É —Ü–µ–ª–∏! –ü—Ä–æ–¥–æ–ª–∂–∞–π! üî•";
                        } else if (progress >= 50) {
                            message = "–û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å! –ü–æ–ª–æ–≤–∏–Ω–∞ –ø—É—Ç–∏! üëè";
                        } else if (progress >= 25) {
                            message = "–•–æ—Ä–æ—à–µ–µ –Ω–∞—á–∞–ª–æ! –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Å—è! üí™";
                        } else {
                            message = "–ö–∞–∂–¥—ã–π —à–∞–≥ –≤–∞–∂–µ–Ω! –ü—Ä–æ–¥–æ–ª–∂–∞–π! üåü";
                        }
                        
                        if (message) {
                            window.sofiaCompanion.showMessage(message);
                        }
                    }
                });
            });
            
            // React to goal cards based on status
            const goalCards = document.querySelectorAll('.card');
            goalCards.forEach(card => {
                card.addEventListener('mouseenter', function() {
                    if (Math.random() < 0.2) { // 20% chance
                        if (window.sofiaCompanion) {
                            const statusBadge = this.querySelector('.badge');
                            if (statusBadge) {
                                const status = statusBadge.textContent.toLowerCase();
                                let message = "";
                                
                                if (status.includes('–∞–∫—Ç–∏–≤–Ω')) {
                                    message = "–ê–∫—Ç–∏–≤–Ω–∞—è —Ü–µ–ª—å! –í–ø–µ—Ä—ë–¥! üöÄ";
                                } else if (status.includes('–≤—ã–ø–æ–ª–Ω–µ–Ω')) {
                                    message = "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º! üèÜ";
                                } else if (status.includes('–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')) {
                                    message = "–ò–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–∞ –ø–∞—É–∑–∞. –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ! ‚è∏Ô∏è";
                                } else if (status.includes('–æ—Ç–º–µ–Ω–µ–Ω')) {
                                    message = "–ò–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞–Ω—ã! üîÑ";
                                }
                                
                                if (message) {
                                    window.sofiaCompanion.showMessage(message);
                                }
                            }
                        }
                    }
                });
            });
            
            // React to progress bars
            const progressBars = document.querySelectorAll('.progress-bar');
            progressBars.forEach(bar => {
                bar.addEventListener('mouseenter', function() {
                    if (Math.random() < 0.3) { // 30% chance
                        if (window.sofiaCompanion) {
                            const progress = parseInt(this.style.width);
                            let message = "";
                            
                            if (progress >= 100) {
                                message = "100%! –¢—ã –º–æ–ª–æ–¥–µ—Ü! üéä";
                            } else if (progress >= 75) {
                                message = "–ü–æ—á—Ç–∏ —Ñ–∏–Ω–∏—à! üèÅ";
                            } else if (progress >= 50) {
                                message = "–ü–æ–ª–æ–≤–∏–Ω–∞ –ø—É—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–∞! üìà";
                            } else {
                                message = "–ö–∞–∂–¥—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤–∞–∂–µ–Ω! üìä";
                            }
                            
                            if (message) {
                                window.sofiaCompanion.showMessage(message);
                            }
                        }
                    }
                });
            });
        });
    </script>
}

@functions {
    string GetTypeEmoji(Sofia.Web.Models.GoalType type)
    {
        return type switch
        {
            Sofia.Web.Models.GoalType.Personal => "üë§",
            Sofia.Web.Models.GoalType.Therapy => "üß†",
            Sofia.Web.Models.GoalType.Wellness => "üå±",
            Sofia.Web.Models.GoalType.Social => "üë•",
            Sofia.Web.Models.GoalType.Professional => "üíº",
            _ => "üéØ"
        };
    }
    
    string GetStatusText(Sofia.Web.Models.GoalStatus status)
    {
        return status switch
        {
            Sofia.Web.Models.GoalStatus.Active => "–ê–∫—Ç–∏–≤–Ω–∞",
            Sofia.Web.Models.GoalStatus.Completed => "–í—ã–ø–æ–ª–Ω–µ–Ω–∞",
            Sofia.Web.Models.GoalStatus.Paused => "–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
            Sofia.Web.Models.GoalStatus.Cancelled => "–û—Ç–º–µ–Ω–µ–Ω–∞",
            _ => status.ToString()
        };
    }
    
    string GetStatusBadgeClass(Sofia.Web.Models.GoalStatus status)
    {
        return status switch
        {
            Sofia.Web.Models.GoalStatus.Active => "bg-success",
            Sofia.Web.Models.GoalStatus.Completed => "bg-primary",
            Sofia.Web.Models.GoalStatus.Paused => "bg-warning",
            Sofia.Web.Models.GoalStatus.Cancelled => "bg-secondary",
            _ => "bg-secondary"
        };
    }
    
    string GetStatusClass(Sofia.Web.Models.GoalStatus status)
    {
        return status switch
        {
            Sofia.Web.Models.GoalStatus.Completed => "border-success",
            Sofia.Web.Models.GoalStatus.Paused => "border-warning",
            Sofia.Web.Models.GoalStatus.Cancelled => "border-secondary",
            _ => ""
        };
    }
    
    string GetProgressBarClass(Sofia.Web.Models.GoalStatus status)
    {
        return status switch
        {
            Sofia.Web.Models.GoalStatus.Active => "bg-success",
            Sofia.Web.Models.GoalStatus.Completed => "bg-primary",
            Sofia.Web.Models.GoalStatus.Paused => "bg-warning",
            Sofia.Web.Models.GoalStatus.Cancelled => "bg-secondary",
            _ => "bg-secondary"
        };
    }
}


