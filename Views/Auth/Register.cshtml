@{
    ViewData["Title"] = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è";
}

<div class="row justify-content-center">
    <div class="col-md-6">
        <div class="card shadow-lg">
            <div class="card-header bg-gradient-primary text-white">
                <h3 class="text-center mb-0">
                    <span class="me-2">üåü</span>
                    –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Sofia!
                </h3>
                <p class="text-center mb-0 opacity-75">–°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–∞—à–µ–≥–æ –ø—É—Ç–∏</p>
            </div>
            <div class="card-body">
                <form asp-action="Register" method="post">
                    <div class="mb-3">
                        <label for="username" class="form-label">–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è *</label>
                        <input type="text" class="form-control" id="username" name="username" required placeholder="–ü—Ä–∏–¥—É–º–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è">
                        <div class="form-text">–ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞</div>
                    </div>
                    <div class="mb-3">
                        <label for="email" class="form-label">Email *</label>
                        <input type="email" class="form-control" id="email" name="email" required placeholder="your.email@example.com">
                        <div class="form-text">–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞</div>
                    </div>
                    <div class="mb-3">
                        <label for="fullName" class="form-label">–ü–æ–ª–Ω–æ–µ –∏–º—è</label>
                        <input type="text" class="form-control" id="fullName" name="fullName" placeholder="–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤">
                        <div class="form-text">–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –ø–æ–º–æ–≥–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–ø—ã—Ç</div>
                    </div>
                    <div class="mb-3">
                        <label for="password" class="form-label">–ü–∞—Ä–æ–ª—å *</label>
                        <input type="password" class="form-control" id="password" name="password" required placeholder="–ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤">
                        <div class="form-text">–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã</div>
                    </div>
                    <div class="mb-3">
                        <label for="confirmPassword" class="form-label">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å *</label>
                        <input type="password" class="form-control" id="confirmPassword" name="confirmPassword" required placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å">
                    </div>
                    <div class="mb-3">
                        <label for="role" class="form-label">–¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞ *</label>
                        <select class="form-select" id="role" name="role">
                            <option value="user" selected>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –≤–µ–¥—É –¥–Ω–µ–≤–Ω–∏–∫ –∏ —Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ —Å–æ–±–æ–π</option>
                            <option value="psychologist">üë®‚Äç‚öïÔ∏è –ü—Å–∏—Ö–æ–ª–æ–≥ - –ø–æ–º–æ–≥–∞—é –¥—Ä—É–≥–∏–º –≤ –∏—Ö –ø—É—Ç–∏</option>
                        </select>
                    </div>
                    <div class="d-grid">
                        <button type="submit" class="btn btn-primary btn-lg">üöÄ –°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç</button>
                    </div>
                </form>
                <div class="text-center mt-4">
                    <p class="text-muted">–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? <a asp-action="Login" class="text-primary fw-bold">–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É</a></p>
                    <hr class="my-3">
                    <small class="text-muted">
                        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—è—Å—å, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å <a href="/home/privacy" class="text-decoration-none">–ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</a>
                    </small>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Enhanced registration form with real-time validation
        document.addEventListener('DOMContentLoaded', function() {
            const password = document.getElementById('password');
            const confirmPassword = document.getElementById('confirmPassword');
            const username = document.getElementById('username');
            const email = document.getElementById('email');
            const fullName = document.getElementById('fullName');
            const form = document.querySelector('form');
            const submitBtn = form.querySelector('button[type="submit"]');

            // Real-time validation functions
            function validateUsername() {
                const value = username.value.trim();
                if (value.length < 3) {
                    username.setCustomValidity('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞');
                    showFieldError(username, '–ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞');
                } else if (!/^[a-zA-Z0-9_]+$/.test(value)) {
                    username.setCustomValidity('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ');
                    showFieldError(username, '–¢–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ _');
                } else {
                    username.setCustomValidity('');
                    hideFieldError(username);
                }
            }

            function validateEmail() {
                const value = email.value.trim();
                const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                if (!emailRegex.test(value)) {
                    email.setCustomValidity('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å');
                    showFieldError(email, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email');
                } else {
                    email.setCustomValidity('');
                    hideFieldError(email);
                }
            }

            function validatePassword() {
                const value = password.value;
                if (value.length < 6) {
                    password.setCustomValidity('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
                    showFieldError(password, '–ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
                } else if (!/(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/.test(value)) {
                    password.setCustomValidity('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã —Ä–∞–∑–Ω–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏ —Ü–∏—Ñ—Ä—ã');
                    showFieldError(password, '–ë—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, —Ä–µ–≥–∏—Å—Ç—Ä');
                } else {
                    password.setCustomValidity('');
                    hideFieldError(password);
                }
                validateConfirmPassword();
            }

            function validateConfirmPassword() {
                if (password.value !== confirmPassword.value) {
                    confirmPassword.setCustomValidity('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
                    showFieldError(confirmPassword, '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
                } else {
                    confirmPassword.setCustomValidity('');
                    hideFieldError(confirmPassword);
                }
            }

            function showFieldError(field, message) {
                let errorDiv = field.parentNode.querySelector('.field-error');
                if (!errorDiv) {
                    errorDiv = document.createElement('div');
                    errorDiv.className = 'field-error text-danger small mt-1';
                    field.parentNode.appendChild(errorDiv);
                }
                errorDiv.textContent = message;
                field.classList.add('is-invalid');
                field.classList.remove('is-valid');
            }

            function hideFieldError(field) {
                const errorDiv = field.parentNode.querySelector('.field-error');
                if (errorDiv) {
                    errorDiv.remove();
                }
                field.classList.remove('is-invalid');
                field.classList.add('is-valid');
            }

            // Event listeners
            username.addEventListener('input', validateUsername);
            username.addEventListener('blur', validateUsername);

            email.addEventListener('input', validateEmail);
            email.addEventListener('blur', validateEmail);

            password.addEventListener('input', validatePassword);
            password.addEventListener('blur', validatePassword);

            confirmPassword.addEventListener('input', validateConfirmPassword);
            confirmPassword.addEventListener('blur', validateConfirmPassword);

            fullName.addEventListener('input', function() {
                if (this.value.trim()) {
                    this.classList.add('is-valid');
                } else {
                    this.classList.remove('is-valid', 'is-invalid');
                }
            });

            // Form submission with loading state
            form.addEventListener('submit', function(e) {
                if (!form.checkValidity()) {
                    e.preventDefault();
                    // Trigger validation on all fields
                    [username, email, password, confirmPassword].forEach(field => {
                        const event = new Event('blur');
                        field.dispatchEvent(event);
                    });
                    return false;
                }

                // Show loading state
                submitBtn.disabled = true;
                submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>–°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞...';

                // Re-enable after 10 seconds as fallback
                setTimeout(() => {
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = 'üöÄ –°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç';
                }, 10000);
            });

            // Password strength indicator
            password.addEventListener('input', function() {
                const strength = calculatePasswordStrength(this.value);
                updatePasswordStrengthIndicator(strength);
            });

            function calculatePasswordStrength(password) {
                let strength = 0;
                if (password.length >= 6) strength++;
                if (password.length >= 8) strength++;
                if (/[a-z]/.test(password)) strength++;
                if (/[A-Z]/.test(password)) strength++;
                if (/\d/.test(password)) strength++;
                if (/[^a-zA-Z\d]/.test(password)) strength++;
                return strength;
            }

            function updatePasswordStrengthIndicator(strength) {
                let indicator = password.parentNode.querySelector('.password-strength');
                if (!indicator) {
                    indicator = document.createElement('div');
                    indicator.className = 'password-strength mt-1';
                    password.parentNode.appendChild(indicator);
                }

                const labels = ['–û—á–µ–Ω—å —Å–ª–∞–±—ã–π', '–°–ª–∞–±—ã–π', '–°—Ä–µ–¥–Ω–∏–π', '–•–æ—Ä–æ—à–∏–π', '–û—Ç–ª–∏—á–Ω—ã–π'];
                const colors = ['#dc3545', '#fd7e14', '#ffc107', '#20c997', '#28a745'];

                if (strength === 0) {
                    indicator.style.display = 'none';
                } else {
                    indicator.style.display = 'block';
                    indicator.innerHTML = `
                        <small class="text-muted">–ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è:
                            <span style="color: ${colors[strength - 1]}; font-weight: bold;">
                                ${labels[strength - 1]}
                            </span>
                        </small>
                    `;
                }
            }
        });
    </script>
}
