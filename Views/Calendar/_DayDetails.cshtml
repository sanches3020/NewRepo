@{
    var date = (DateTime)ViewBag.Date;
    var notes = ViewBag.Notes as List<Sofia.Web.Models.Note>;
    var emotions = ViewBag.Emotions as List<Sofia.Web.Models.EmotionEntry>;
    var goals = ViewBag.Goals as List<Sofia.Web.Models.Goal>;
}

<div class="day-details">
    <div class="row g-3">
        <!-- Emotions Section -->
        <div class="col-12">
            <h6 class="text-primary mb-3">üòä –≠–º–æ—Ü–∏–∏ –¥–Ω—è</h6>
            @if (emotions?.Any() == true)
            {
                <div class="emotions-list">
                    @foreach (var emotion in emotions)
                    {
                        <div class="emotion-item d-flex align-items-center mb-2 p-2 border rounded">
                            <span class="me-2" style="font-size: 20px;">@GetEmotionEmoji(emotion.Emotion)</span>
                            <div class="flex-grow-1">
                                <div class="fw-bold">@GetEmotionName(emotion.Emotion)</div>
                                @if (!string.IsNullOrEmpty(emotion.Note))
                                {
                                    <small class="text-muted">@emotion.Note</small>
                                }
                            </div>
                            <small class="text-muted">@emotion?.CreatedAt.ToString("HH:mm")</small>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="text-center text-muted py-3">
                    <div style="font-size: 24px;">üòê</div>
                    <p class="mb-0">–≠–º–æ—Ü–∏–∏ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã</p>
                </div>
            }
            
            @if (emotions?.Count < 5)
            {
                <div class="mt-3">
                    <button class="btn btn-outline-primary btn-sm" onclick="openEmotionModal('@date.ToString("yyyy-MM-dd")')">
                        + –î–æ–±–∞–≤–∏—Ç—å —ç–º–æ—Ü–∏—é (@(emotions?.Count ?? 0)/5)
                    </button>
                </div>
            }
        </div>

        <!-- Notes Section -->
        <div class="col-12">
            <h6 class="text-success mb-3">üìù –ó–∞–º–µ—Ç–∫–∏</h6>
            @if (notes?.Any() == true)
            {
                <div class="notes-list">
                    @foreach (var note in notes)
                    {
                        <div class="note-item d-flex align-items-start mb-2 p-2 border rounded">
                            <span class="me-2" style="font-size: 16px;">@GetEmotionEmoji(note.Emotion)</span>
                            <div class="flex-grow-1">
                                <div class="note-content">@note.Content</div>
                                @if (!string.IsNullOrEmpty(note.Tags))
                                {
                                    <div class="note-tags mt-1">
                                        @foreach (var tag in note.Tags.Split(','))
                                        {
                                            <span class="badge bg-secondary me-1">@tag.Trim()</span>
                                        }
                                    </div>
                                }
                            </div>
                            <small class="text-muted">@note?.CreatedAt.ToString("HH:mm")</small>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="text-center text-muted py-3">
                    <div style="font-size: 24px;">üìù</div>
                    <p class="mb-0">–ó–∞–º–µ—Ç–æ–∫ –Ω–µ—Ç</p>
                </div>
            }
            
            <div class="mt-3">
                <a href="/notes/create?date=@date.ToString("yyyy-MM-dd")" class="btn btn-outline-success btn-sm">
                    + –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
                </a>
            </div>
        </div>

        <!-- Goals Section -->
        <div class="col-12">
            <h6 class="text-warning mb-3">üéØ –¶–µ–ª–∏</h6>
            @if (goals?.Any() == true)
            {
                <div class="goals-list">
                    @foreach (var goal in goals)
                    {
                        <div class="goal-item d-flex align-items-center mb-2 p-2 border rounded">
                            <span class="me-2" style="font-size: 16px;">@GetGoalEmoji(goal.Type)</span>
                            <div class="flex-grow-1">
                                <div class="fw-bold">@goal.Title</div>
                                <div class="progress mt-1" style="height: 4px;">
                                    <div class="progress-bar @GetGoalProgressClass(goal.Status)" 
                                         style="width: @goal.Progress%"></div>
                                </div>
                                <small class="text-muted">@goal.Progress% ‚Ä¢ @GetGoalStatusName(goal.Status)</small>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="text-center text-muted py-3">
                    <div style="font-size: 24px;">üéØ</div>
                    <p class="mb-0">–¶–µ–ª–µ–π –Ω–µ—Ç</p>
                </div>
            }
            
            <div class="mt-3">
                <a href="/goals/create?date=@date.ToString("yyyy-MM-dd")" class="btn btn-outline-warning btn-sm">
                    + –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å
                </a>
            </div>
        </div>
    </div>
</div>

<style>
.emotion-item, .note-item, .goal-item {
    transition: all 0.2s ease;
}

.emotion-item:hover, .note-item:hover, .goal-item:hover {
    background-color: #f8f9fa;
    border-color: #6b7cff !important;
}

.note-content {
    font-size: 14px;
    line-height: 1.4;
}

.note-tags .badge {
    font-size: 0.7rem;
}
</style>

@functions {
    string GetEmotionEmoji(Sofia.Web.Models.EmotionType emotion)
    {
        return emotion switch
        {
            Sofia.Web.Models.EmotionType.VerySad => "üò¢",
            Sofia.Web.Models.EmotionType.Sad => "üòî",
            Sofia.Web.Models.EmotionType.Neutral => "üòê",
            Sofia.Web.Models.EmotionType.Happy => "üòä",
            Sofia.Web.Models.EmotionType.VeryHappy => "üòÑ",
            Sofia.Web.Models.EmotionType.Anxious => "üò∞",
            Sofia.Web.Models.EmotionType.Calm => "üòå",
            Sofia.Web.Models.EmotionType.Excited => "ü§©",
            Sofia.Web.Models.EmotionType.Frustrated => "üò§",
            Sofia.Web.Models.EmotionType.Grateful => "üôè",
            _ => "üòê"
        };
    }
    
    string GetEmotionName(Sofia.Web.Models.EmotionType emotion)
    {
        return emotion switch
        {
            Sofia.Web.Models.EmotionType.VerySad => "–û—á–µ–Ω—å –≥—Ä—É—Å—Ç–Ω–æ",
            Sofia.Web.Models.EmotionType.Sad => "–ì—Ä—É—Å—Ç–Ω–æ",
            Sofia.Web.Models.EmotionType.Neutral => "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ",
            Sofia.Web.Models.EmotionType.Happy => "–†–∞–¥–æ—Å—Ç–Ω–æ",
            Sofia.Web.Models.EmotionType.VeryHappy => "–û—á–µ–Ω—å —Ä–∞–¥–æ—Å—Ç–Ω–æ",
            Sofia.Web.Models.EmotionType.Anxious => "–¢—Ä–µ–≤–æ–∂–Ω–æ",
            Sofia.Web.Models.EmotionType.Calm => "–°–ø–æ–∫–æ–π–Ω–æ",
            Sofia.Web.Models.EmotionType.Excited => "–í–∑–≤–æ–ª–Ω–æ–≤–∞–Ω–Ω–æ",
            Sofia.Web.Models.EmotionType.Frustrated => "–†–∞–∑–¥—Ä–∞–∂—ë–Ω–Ω–æ",
            Sofia.Web.Models.EmotionType.Grateful => "–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ",
            _ => emotion.ToString()
        };
    }
    
    string GetGoalEmoji(Sofia.Web.Models.GoalType type)
    {
        return type switch
        {
            Sofia.Web.Models.GoalType.Personal => "üë§",
            Sofia.Web.Models.GoalType.Therapy => "ü©∫",
            Sofia.Web.Models.GoalType.Wellness => "üå±",
            Sofia.Web.Models.GoalType.Social => "üíï",
            Sofia.Web.Models.GoalType.Professional => "üíº",
            _ => "üéØ"
        };
    }
    
    string GetGoalProgressClass(Sofia.Web.Models.GoalStatus status)
    {
        return status switch
        {
            Sofia.Web.Models.GoalStatus.Completed => "bg-success",
            Sofia.Web.Models.GoalStatus.Active => "bg-primary",
            Sofia.Web.Models.GoalStatus.Paused => "bg-warning",
            Sofia.Web.Models.GoalStatus.Cancelled => "bg-danger",
            _ => "bg-secondary"
        };
    }
    
    string GetGoalStatusName(Sofia.Web.Models.GoalStatus status)
    {
        return status switch
        {
            Sofia.Web.Models.GoalStatus.Completed => "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
            Sofia.Web.Models.GoalStatus.Active => "–ê–∫—Ç–∏–≤–Ω–æ",
            Sofia.Web.Models.GoalStatus.Paused => "–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
            Sofia.Web.Models.GoalStatus.Cancelled => "–û—Ç–º–µ–Ω–µ–Ω–æ",
            _ => status.ToString()
        };
    }
}
