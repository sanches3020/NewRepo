@{
    ViewData["Title"] = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–º–æ—Ü–∏–π";
    var emotionStats = ViewBag.EmotionStats as List<dynamic>;
    var daysBack = ViewBag.DaysBack as int? ?? 30;
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–º–æ—Ü–∏–π</h2>
    <div class="d-flex gap-2">
        <a href="/calendar" class="btn btn-outline-secondary">‚Üê –ö–∞–ª–µ–Ω–¥–∞—Ä—å</a>
        <div class="btn-group" role="group">
            <a href="/calendar/emotion-stats?days=7" class="btn btn-outline-primary btn-sm @(daysBack == 7 ? "active" : "")">7 –¥–Ω–µ–π</a>
            <a href="/calendar/emotion-stats?days=30" class="btn btn-outline-primary btn-sm @(daysBack == 30 ? "active" : "")">30 –¥–Ω–µ–π</a>
            <a href="/calendar/emotion-stats?days=90" class="btn btn-outline-primary btn-sm @(daysBack == 90 ? "active" : "")">90 –¥–Ω–µ–π</a>
        </div>
    </div>
</div>

@if (emotionStats?.Any() != true)
{
    <div class="text-center py-5">
        <div class="mb-3" style="font-size: 48px;">üìà</div>
        <h4 class="text-muted">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ @daysBack –¥–Ω–µ–π</h4>
        <p class="text-muted">–°–æ–∑–¥–∞–π—Ç–µ –∑–∞–º–µ—Ç–∫–∏, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ç–º–æ—Ü–∏–π</p>
        <a href="/notes/create" class="btn btn-primary">–°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É</a>
    </div>
}
else
{
    var totalNotes = emotionStats?.Sum(s => s.Count) ?? 0;
    
    <!-- Summary Cards -->
    <div class="row g-3 mb-4">
        <div class="col-md-3">
            <div class="card text-center">
                <div class="card-body">
                    <div class="h3 text-primary">@totalNotes</div>
                    <div class="text-muted">–í—Å–µ–≥–æ –∑–∞–º–µ—Ç–æ–∫</div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-center">
                <div class="card-body">
                    <div class="h3 text-success">@(emotionStats?.Count ?? 0)</div>
                    <div class="text-muted">–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —ç–º–æ—Ü–∏–π</div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-center">
                <div class="card-body">
                    <div class="h3 text-info">@(totalNotes / (double)daysBack):F1</div>
                    <div class="text-muted">–ó–∞–º–µ—Ç–æ–∫ –≤ –¥–µ–Ω—å</div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-center">
                <div class="card-body">
                        <div class="h3 text-warning">@GetMostFrequentEmotionEmoji(emotionStats ?? new List<dynamic>())</div>
                        <div class="text-muted">–ß–∞—Å—Ç–∞—è —ç–º–æ—Ü–∏—è</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Emotion Distribution -->
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0">üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–π</h5>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-8">
                    <div class="emotion-chart">
                        @foreach (var stat in emotionStats?.OrderByDescending(s => s.Count) ?? Enumerable.Empty<dynamic>())
                        {
                            var percentage = (stat.Count / (double)totalNotes) * 100;
                            <div class="emotion-bar mb-3">
                                <div class="d-flex justify-content-between align-items-center mb-1">
                                    <div class="d-flex align-items-center">
                                        <span class="me-2">@GetEmotionEmoji(stat.Emotion)</span>
                                        <span class="fw-medium">@GetEmotionName(stat.Emotion)</span>
                                    </div>
                                    <div class="text-muted">
                                        <span class="fw-bold">@stat.Count</span> (@percentage:F1%)
                                    </div>
                                </div>
                                <div class="progress" style="height: 8px;">
                                    <div class="progress-bar @GetEmotionBarClass(stat.Emotion)" 
                                         role="progressbar" 
                                         style="width: @percentage%" 
                                         aria-valuenow="@percentage" 
                                         aria-valuemin="0" 
                                         aria-valuemax="100">
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="emotion-pie-chart">
                        <canvas id="emotionPieChart" width="200" height="200"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Weekly Pattern -->
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0">üìÖ –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏</h5>
        </div>
        <div class="card-body">
            <div class="text-center text-muted">
                <p>–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –ø–æ–º–æ–∂–µ—Ç –ø–æ–Ω—è—Ç—å, –≤ –∫–∞–∫–∏–µ –¥–Ω–∏ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è –ª—É—á—à–µ –∏–ª–∏ —Ö—É–∂–µ.</p>
                <small>–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø—Ä–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–∏ –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö.</small>
            </div>
        </div>
    </div>

    <!-- Insights -->
    <div class="card">
        <div class="card-header">
            <h5 class="mb-0">üí° –ò–Ω—Å–∞–π—Ç—ã</h5>
        </div>
        <div class="card-body">
            @{
                var mostFrequent = emotionStats?.OrderByDescending(s => s.Count).FirstOrDefault();
                var leastFrequent = emotionStats?.OrderBy(s => s.Count).FirstOrDefault();
                var averagePerDay = totalNotes / (double)daysBack;
            }
            
            <div class="row g-3">
                <div class="col-md-6">
                    <div class="alert alert-info">
                        <h6 class="alert-heading">üéØ –°–∞–º–∞—è —á–∞—Å—Ç–∞—è —ç–º–æ—Ü–∏—è</h6>
                        <p class="mb-0">
                            @if (mostFrequent != null)
                            {
                                <text>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ @daysBack –¥–Ω–µ–π –≤—ã —á–∞—â–µ –≤—Å–µ–≥–æ —á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∏ 
                                <strong>@GetEmotionEmoji(mostFrequent.Emotion) @GetEmotionName(mostFrequent.Emotion)</strong> 
                                (@mostFrequent.Count —Ä–∞–∑).</text>
                            }
                            else
                            {
                                <text>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.</text>
                            }
                        </p>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="alert alert-success">
                        <h6 class="alert-heading">üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</h6>
                        <p class="mb-0">
                            –í—ã —Å–æ–∑–¥–∞–µ—Ç–µ –≤ —Å—Ä–µ–¥–Ω–µ–º <strong>@averagePerDay:F1 –∑–∞–º–µ—Ç–æ–∫ –≤ –¥–µ–Ω—å</strong>. 
                            @if (averagePerDay >= 1)
                            {
                                <span>–û—Ç–ª–∏—á–Ω–∞—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å!</span>
                            }
                            else
                            {
                                <span>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏ —á–∞—â–µ.</span>
                            }
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    const ctx = document.getElementById('emotionPieChart');
    if (ctx) {
        const emotionStats = @Html.Raw(Json.Serialize(emotionStats));
        
        new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: emotionStats.map(s => s.emotion),
                datasets: [{
                    data: emotionStats.map(s => s.count),
                    backgroundColor: emotionStats.map(s => getEmotionColor(s.emotion)),
                    borderWidth: 2,
                    borderColor: '#ffffff'
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'bottom',
                        labels: {
                            usePointStyle: true,
                            padding: 20
                        }
                    }
                }
            }
        });
    }
});

function getEmotionColor(emotion) {
    const colors = {
        'VerySad': '#fee2e2',
        'Sad': '#fecaca',
        'Neutral': '#f3f4f6',
        'Happy': '#dcfce7',
        'VeryHappy': '#bbf7d0',
        'Anxious': '#fef3c7',
        'Calm': '#dbeafe',
        'Excited': '#fde68a',
        'Frustrated': '#fed7aa',
        'Grateful': '#e0e7ff'
    };
    return colors[emotion] || '#f3f4f6';
}
</script>

@functions {
    string GetMostFrequentEmotionEmoji(List<dynamic> stats)
    {
        if (!stats.Any()) return "üòê";
        
        var mostFrequent = stats.OrderByDescending(s => s.Count).First();
        return GetEmotionEmoji(mostFrequent.Emotion);
    }
    
    string GetEmotionEmoji(Sofia.Web.Models.EmotionType emotion)
    {
        return emotion switch
        {
            Sofia.Web.Models.EmotionType.VerySad => "üò¢",
            Sofia.Web.Models.EmotionType.Sad => "üòî",
            Sofia.Web.Models.EmotionType.Neutral => "üòê",
            Sofia.Web.Models.EmotionType.Happy => "üòä",
            Sofia.Web.Models.EmotionType.VeryHappy => "üòÑ",
            Sofia.Web.Models.EmotionType.Anxious => "üò∞",
            Sofia.Web.Models.EmotionType.Calm => "üòå",
            Sofia.Web.Models.EmotionType.Excited => "ü§©",
            Sofia.Web.Models.EmotionType.Frustrated => "üò§",
            Sofia.Web.Models.EmotionType.Grateful => "üôè",
            _ => "üòê"
        };
    }
    
    string GetEmotionName(Sofia.Web.Models.EmotionType emotion)
    {
        return emotion switch
        {
            Sofia.Web.Models.EmotionType.VerySad => "–û—á–µ–Ω—å –≥—Ä—É—Å—Ç–Ω–æ",
            Sofia.Web.Models.EmotionType.Sad => "–ì—Ä—É—Å—Ç–Ω–æ",
            Sofia.Web.Models.EmotionType.Neutral => "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ",
            Sofia.Web.Models.EmotionType.Happy => "–†–∞–¥–æ—Å—Ç–Ω–æ",
            Sofia.Web.Models.EmotionType.VeryHappy => "–û—á–µ–Ω—å —Ä–∞–¥–æ—Å—Ç–Ω–æ",
            Sofia.Web.Models.EmotionType.Anxious => "–¢—Ä–µ–≤–æ–∂–Ω–æ",
            Sofia.Web.Models.EmotionType.Calm => "–°–ø–æ–∫–æ–π–Ω–æ",
            Sofia.Web.Models.EmotionType.Excited => "–í–∑–≤–æ–ª–Ω–æ–≤–∞–Ω–Ω–æ",
            Sofia.Web.Models.EmotionType.Frustrated => "–†–∞–∑–¥—Ä–∞–∂—ë–Ω–Ω–æ",
            Sofia.Web.Models.EmotionType.Grateful => "–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ",
            _ => emotion.ToString()
        };
    }
    
    string GetEmotionBarClass(Sofia.Web.Models.EmotionType emotion)
    {
        return emotion switch
        {
            Sofia.Web.Models.EmotionType.VerySad => "bg-danger",
            Sofia.Web.Models.EmotionType.Sad => "bg-danger",
            Sofia.Web.Models.EmotionType.Neutral => "bg-secondary",
            Sofia.Web.Models.EmotionType.Happy => "bg-success",
            Sofia.Web.Models.EmotionType.VeryHappy => "bg-success",
            Sofia.Web.Models.EmotionType.Anxious => "bg-warning",
            Sofia.Web.Models.EmotionType.Calm => "bg-info",
            Sofia.Web.Models.EmotionType.Excited => "bg-warning",
            Sofia.Web.Models.EmotionType.Frustrated => "bg-warning",
            Sofia.Web.Models.EmotionType.Grateful => "bg-primary",
            _ => "bg-secondary"
        };
    }
}
