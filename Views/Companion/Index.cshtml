@{
    ViewData["Title"] = "–ú–æ–π –∫–æ–º–ø–∞–Ω—å–æ–Ω";
    var petMood = ViewBag.PetMood as string;
    var petMessage = ViewBag.PetMessage as string;
    var lastEmotion = ViewBag.LastEmotion as Sofia.Web.Models.EmotionType?;
    var recentNotes = ViewBag.RecentNotes as List<Sofia.Web.Models.Note>;
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2>üêæ –ú–æ–π –∫–æ–º–ø–∞–Ω—å–æ–Ω</h2>
    <div class="d-flex gap-2">
        <a href="/notes/create" class="btn btn-outline-primary btn-sm">üìù –ó–∞–º–µ—Ç–∫–∞</a>
        <a href="/calendar" class="btn btn-outline-info btn-sm">üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å</a>
    </div>
</div>

<div class="row g-4">
    <!-- Pet Display -->
    <div class="col-lg-8">
        <div class="card h-100">
            <div class="card-body text-center">
                <div class="pet-container mb-4">
                    <div class="pet-avatar @petMood" id="petAvatar">
                        <div class="pet-face">
                            <div class="pet-eyes">
                                <div class="pet-eye left"></div>
                                <div class="pet-eye right"></div>
                            </div>
                            <div class="pet-mouth"></div>
                        </div>
                    </div>
                </div>
                
                <div class="pet-speech-bubble mb-4" id="petMessage">
                    <p class="mb-0">@petMessage</p>
                </div>

                <!-- Pet Stats -->
                <div class="row g-3 mb-4">
                    <div class="col-4">
                        <div class="pet-stat">
                            <div class="pet-stat-icon">‚ù§Ô∏è</div>
                            <div class="pet-stat-value" id="happiness">85</div>
                            <div class="pet-stat-label">–°—á–∞—Å—Ç—å–µ</div>
                        </div>
                    </div>
                    <div class="col-4">
                        <div class="pet-stat">
                            <div class="pet-stat-icon">‚ö°</div>
                            <div class="pet-stat-value" id="energy">70</div>
                            <div class="pet-stat-label">–≠–Ω–µ—Ä–≥–∏—è</div>
                        </div>
                    </div>
                    <div class="col-4">
                        <div class="pet-stat">
                            <div class="pet-stat-icon">üòå</div>
                            <div class="pet-stat-value" id="comfort">90</div>
                            <div class="pet-stat-label">–ö–æ–º—Ñ–æ—Ä—Ç</div>
                        </div>
                    </div>
                </div>

                <!-- Interaction Buttons -->
                <div class="pet-actions">
                    <button class="btn btn-success me-2" onclick="feedPet()">
                        üçé –ü–æ–∫–æ—Ä–º–∏—Ç—å
                    </button>
                    <button class="btn btn-primary me-2" onclick="playWithPet()">
                        üéæ –ü–æ–∏–≥—Ä–∞—Ç—å
                    </button>
                    <button class="btn btn-info" onclick="comfortPet()">
                        ü§ó –£—Ç–µ—à–∏—Ç—å
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Pet Info & Recent Emotions -->
    <div class="col-lg-4">
        <!-- Pet Mood Info -->
        <div class="card mb-4">
            <div class="card-header">
                <h6 class="mb-0">üé≠ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞</h6>
            </div>
            <div class="card-body">
                <div class="pet-mood-info">
                    <div class="pet-mood-icon @petMood" id="moodIcon"></div>
                    <div class="pet-mood-text">
                        <div class="pet-mood-name" id="moodName">@GetMoodName(petMood ?? "neutral")</div>
                        <div class="pet-mood-description" id="moodDescription">@GetMoodDescription(petMood ?? "neutral")</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Recent Emotions -->
        <div class="card mb-4">
            <div class="card-header">
                <h6 class="mb-0">üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ —ç–º–æ—Ü–∏–∏</h6>
            </div>
            <div class="card-body">
                @if (recentNotes?.Any() == true)
                {
                    <div class="recent-emotions">
                        @foreach (var note in recentNotes.Take(3))
                        {
                            <div class="emotion-item">
                                <div class="emotion-emoji">@GetEmotionEmoji(note.Emotion)</div>
                                <div class="emotion-info">
                                    <div class="emotion-name">@GetEmotionName(note.Emotion)</div>
                                    <div class="emotion-time">@note.CreatedAt.ToString("HH:mm")</div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="text-center text-muted">
                        <div style="font-size: 24px;">üìù</div>
                        <p class="mb-0">–°–æ–∑–¥–∞–π—Ç–µ –∑–∞–º–µ—Ç–∫—É, —á—Ç–æ–±—ã –ø–∏—Ç–æ–º–µ—Ü —É–∑–Ω–∞–ª –æ –≤–∞—à–∏—Ö —ç–º–æ—Ü–∏—è—Ö</p>
                    </div>
                }
            </div>
        </div>

        <!-- Pet Tips -->
        <div class="card">
            <div class="card-header">
                <h6 class="mb-0">üí° –°–æ–≤–µ—Ç—ã</h6>
            </div>
            <div class="card-body">
                <div class="pet-tips">
                    <div class="tip-item">
                        <div class="tip-icon">üçé</div>
                        <div class="tip-text">–ö–æ—Ä–º–∏—Ç–µ –ø–∏—Ç–æ–º—Ü–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å—á–∞—Å—Ç—å—è</div>
                    </div>
                    <div class="tip-item">
                        <div class="tip-icon">üéæ</div>
                        <div class="tip-text">–ò–≥—Ä–∞–π—Ç–µ —Å –ø–∏—Ç–æ–º—Ü–µ–º, —á—Ç–æ–±—ã –ø–æ–≤—ã—Å–∏—Ç—å –µ–≥–æ —ç–Ω–µ—Ä–≥–∏—é</div>
                    </div>
                    <div class="tip-item">
                        <div class="tip-icon">ü§ó</div>
                        <div class="tip-text">–£—Ç–µ—à–∞–π—Ç–µ –ø–∏—Ç–æ–º—Ü–∞, –∫–æ–≥–¥–∞ –æ–Ω –≥—Ä—É—Å—Ç–∏—Ç</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
.pet-container {
    position: relative;
    height: 200px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.pet-avatar {
    width: 120px;
    height: 120px;
    border-radius: 50%;
    background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%);
    position: relative;
    transition: all 0.3s ease;
    animation: float 3s ease-in-out infinite;
}

.pet-avatar.happy {
    background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%);
    animation: bounce 1s ease-in-out infinite;
}

.pet-avatar.sad {
    background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);
    animation: droop 2s ease-in-out infinite;
}

.pet-avatar.excited {
    background: linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%);
    animation: wiggle 0.5s ease-in-out infinite;
}

.pet-avatar.neutral {
    background: linear-gradient(135deg, #d299c2 0%, #fef9d7 100%);
}

.pet-face {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 80px;
    height: 80px;
}

.pet-eyes {
    position: absolute;
    top: 25px;
    left: 50%;
    transform: translateX(-50%);
    width: 40px;
    height: 20px;
}

.pet-eye {
    position: absolute;
    width: 12px;
    height: 12px;
    background: #333;
    border-radius: 50%;
    top: 4px;
}

.pet-eye.left {
    left: 0;
}

.pet-eye.right {
    right: 0;
}

.pet-mouth {
    position: absolute;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    width: 20px;
    height: 10px;
    border: 2px solid #333;
    border-top: none;
    border-radius: 0 0 20px 20px;
}

.pet-speech-bubble {
    background: #fff;
    border: 2px solid #e5e7eb;
    border-radius: 20px;
    padding: 15px 20px;
    position: relative;
    max-width: 300px;
    margin: 0 auto;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.pet-speech-bubble::after {
    content: '';
    position: absolute;
    bottom: -10px;
    left: 50%;
    transform: translateX(-50%);
    width: 0;
    height: 0;
    border-left: 10px solid transparent;
    border-right: 10px solid transparent;
    border-top: 10px solid #fff;
}

.pet-stat {
    text-align: center;
    padding: 10px;
    border-radius: 8px;
    background: #f8f9fa;
}

.pet-stat-icon {
    font-size: 24px;
    margin-bottom: 5px;
}

.pet-stat-value {
    font-size: 18px;
    font-weight: bold;
    color: #333;
}

.pet-stat-label {
    font-size: 12px;
    color: #666;
}

.pet-actions {
    margin-top: 20px;
}

.pet-mood-info {
    display: flex;
    align-items: center;
    gap: 15px;
}

.pet-mood-icon {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 24px;
}

.pet-mood-icon.happy { background: #dcfce7; }
.pet-mood-icon.sad { background: #fee2e2; }
.pet-mood-icon.excited { background: #fef3c7; }
.pet-mood-icon.neutral { background: #f3f4f6; }

.pet-mood-name {
    font-weight: bold;
    color: #333;
}

.pet-mood-description {
    font-size: 12px;
    color: #666;
}

.recent-emotions {
    space-y: 10px;
}

.emotion-item {
    display: flex;
    align-items: center;
    gap: 10px;
    padding: 8px 0;
    border-bottom: 1px solid #f3f4f6;
}

.emotion-item:last-child {
    border-bottom: none;
}

.emotion-emoji {
    font-size: 20px;
}

.emotion-name {
    font-weight: 500;
    color: #333;
}

.emotion-time {
    font-size: 12px;
    color: #666;
}

.pet-tips {
    space-y: 15px;
}

.tip-item {
    display: flex;
    align-items: flex-start;
    gap: 10px;
    padding: 10px 0;
}

.tip-icon {
    font-size: 20px;
    flex-shrink: 0;
}

.tip-text {
    font-size: 14px;
    color: #666;
    line-height: 1.4;
}

@@keyframes float {
    0%, 100% { transform: translateY(0px); }
    50% { transform: translateY(-10px); }
}

@@keyframes bounce {
    0%, 100% { transform: translateY(0px); }
    50% { transform: translateY(-15px); }
}

@@keyframes droop {
    0%, 100% { transform: translateY(0px); }
    50% { transform: translateY(5px); }
}

@@keyframes wiggle {
    0%, 100% { transform: rotate(0deg); }
    25% { transform: rotate(5deg); }
    75% { transform: rotate(-5deg); }
}
</style>

<script>
let petStats = {
    happiness: 85,
    energy: 70,
    comfort: 90
};

function updatePetStats() {
    document.getElementById('happiness').textContent = petStats.happiness;
    document.getElementById('energy').textContent = petStats.energy;
    document.getElementById('comfort').textContent = petStats.comfort;
}

function feedPet() {
    fetch('/companion/feed', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            petStats.happiness = Math.min(100, petStats.happiness + 10);
            updatePetStats();
            updatePetMessage(data.message);
            animatePet('happy');
        }
    });
}

function playWithPet() {
    fetch('/companion/play', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            petStats.energy = Math.min(100, petStats.energy + 15);
            updatePetStats();
            updatePetMessage(data.message);
            animatePet('excited');
        }
    });
}

function comfortPet() {
    fetch('/companion/comfort', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            petStats.comfort = Math.min(100, petStats.comfort + 5);
            updatePetStats();
            updatePetMessage(data.message);
            animatePet('calm');
        }
    });
}

function updatePetMessage(message) {
    const messageElement = document.getElementById('petMessage');
    messageElement.innerHTML = `<p class="mb-0">${message}</p>`;
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    messageElement.style.opacity = '0';
    setTimeout(() => {
        messageElement.style.opacity = '1';
    }, 100);
}

function animatePet(mood) {
    const petAvatar = document.getElementById('petAvatar');
    petAvatar.className = `pet-avatar ${mood}`;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–∏—Ç–æ–º—Ü–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
setInterval(() => {
    fetch('/companion/status')
    .then(response => response.json())
    .then(data => {
        updatePetMessage(data.petMessage);
        animatePet(data.petMood);
    });
}, 30000);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    updatePetStats();
});
</script>

@functions {
    string GetMoodName(string mood)
    {
        return mood switch
        {
            "happy" => "–°—á–∞—Å—Ç–ª–∏–≤—ã–π",
            "sad" => "–ì—Ä—É—Å—Ç–Ω—ã–π",
            "excited" => "–í–æ–∑–±—É–∂–¥–µ–Ω–Ω—ã–π",
            "neutral" => "–°–ø–æ–∫–æ–π–Ω—ã–π",
            "worried" => "–í–æ–ª–Ω—É—é—â–∏–π—Å—è",
            "peaceful" => "–£–º–∏—Ä–æ—Ç–≤–æ—Ä–µ–Ω–Ω—ã–π",
            "energetic" => "–≠–Ω–µ—Ä–≥–∏—á–Ω—ã–π",
            "confused" => "–û–∑–∞–¥–∞—á–µ–Ω–Ω—ã–π",
            "loving" => "–õ—é–±—è—â–∏–π",
            "concerned" => "–û–±–µ—Å–ø–æ–∫–æ–µ–Ω–Ω—ã–π",
            _ => "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        };
    }
    
    string GetMoodDescription(string mood)
    {
        return mood switch
        {
            "happy" => "–ü–∏—Ç–æ–º–µ—Ü —á—É–≤—Å—Ç–≤—É–µ—Ç —Å–µ–±—è –æ—Ç–ª–∏—á–Ω–æ!",
            "sad" => "–ü–∏—Ç–æ–º–µ—Ü –≥—Ä—É—Å—Ç–∏—Ç –∏ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ",
            "excited" => "–ü–∏—Ç–æ–º–µ—Ü –ø–æ–ª–æ–Ω —ç–Ω–µ—Ä–≥–∏–∏ –∏ –≥–æ—Ç–æ–≤ –∏–≥—Ä–∞—Ç—å!",
            "neutral" => "–ü–∏—Ç–æ–º–µ—Ü —Å–ø–æ–∫–æ–µ–Ω –∏ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω",
            "worried" => "–ü–∏—Ç–æ–º–µ—Ü –≤–æ–ª–Ω—É–µ—Ç—Å—è –æ –≤–∞—Å",
            "peaceful" => "–ü–∏—Ç–æ–º–µ—Ü –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≥–∞—Ä–º–æ–Ω–∏–∏",
            "energetic" => "–ü–∏—Ç–æ–º–µ—Ü –ø–æ–ª–æ–Ω —Å–∏–ª –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
            "confused" => "–ü–∏—Ç–æ–º–µ—Ü –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç",
            "loving" => "–ü–∏—Ç–æ–º–µ—Ü –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω –ª—é–±–æ–≤—å—é –∫ –≤–∞–º",
            "concerned" => "–ü–∏—Ç–æ–º–µ—Ü –±–µ—Å–ø–æ–∫–æ–∏—Ç—Å—è –æ –≤–∞—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏",
            _ => "–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        };
    }
    
    string GetEmotionEmoji(Sofia.Web.Models.EmotionType emotion)
    {
        return emotion switch
        {
            Sofia.Web.Models.EmotionType.VerySad => "üò¢",
            Sofia.Web.Models.EmotionType.Sad => "üòî",
            Sofia.Web.Models.EmotionType.Neutral => "üòê",
            Sofia.Web.Models.EmotionType.Happy => "üòä",
            Sofia.Web.Models.EmotionType.VeryHappy => "üòÑ",
            Sofia.Web.Models.EmotionType.Anxious => "üò∞",
            Sofia.Web.Models.EmotionType.Calm => "üòå",
            Sofia.Web.Models.EmotionType.Excited => "ü§©",
            Sofia.Web.Models.EmotionType.Frustrated => "üò§",
            Sofia.Web.Models.EmotionType.Grateful => "üôè",
            _ => "üòê"
        };
    }
    
    string GetEmotionName(Sofia.Web.Models.EmotionType emotion)
    {
        return emotion switch
        {
            Sofia.Web.Models.EmotionType.VerySad => "–û—á–µ–Ω—å –≥—Ä—É—Å—Ç–Ω–æ",
            Sofia.Web.Models.EmotionType.Sad => "–ì—Ä—É—Å—Ç–Ω–æ",
            Sofia.Web.Models.EmotionType.Neutral => "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ",
            Sofia.Web.Models.EmotionType.Happy => "–†–∞–¥–æ—Å—Ç–Ω–æ",
            Sofia.Web.Models.EmotionType.VeryHappy => "–û—á–µ–Ω—å —Ä–∞–¥–æ—Å—Ç–Ω–æ",
            Sofia.Web.Models.EmotionType.Anxious => "–¢—Ä–µ–≤–æ–∂–Ω–æ",
            Sofia.Web.Models.EmotionType.Calm => "–°–ø–æ–∫–æ–π–Ω–æ",
            Sofia.Web.Models.EmotionType.Excited => "–í–∑–≤–æ–ª–Ω–æ–≤–∞–Ω–Ω–æ",
            Sofia.Web.Models.EmotionType.Frustrated => "–†–∞–∑–¥—Ä–∞–∂—ë–Ω–Ω–æ",
            Sofia.Web.Models.EmotionType.Grateful => "–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ",
            _ => emotion.ToString()
        };
    }
}


