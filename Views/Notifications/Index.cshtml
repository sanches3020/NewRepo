@{
    ViewData["Title"] = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è";
    var notifications = ViewBag.Notifications as List<Sofia.Web.Models.Notification>;
    var unreadCount = ViewBag.UnreadCount as int? ?? 0;
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2>üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h2>
    <div class="d-flex gap-2">
        <button class="btn btn-outline-primary btn-sm" onclick="checkNotifications()">üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
        <button class="btn btn-outline-success btn-sm" onclick="markAllAsRead()">‚úÖ –ü—Ä–æ—á–∏—Ç–∞—Ç—å –≤—Å–µ</button>
        <a href="/notifications/settings" class="btn btn-outline-info btn-sm">‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</a>
    </div>
</div>

<!-- Notification Stats -->
<div class="row g-3 mb-4">
    <div class="col-md-3">
        <div class="card text-center">
            <div class="card-body">
                <div class="h3 text-primary">@unreadCount</div>
                <div class="text-muted">–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö</div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-center">
            <div class="card-body">
                <div class="h3 text-info">@(notifications?.Count ?? 0)</div>
                <div class="text-muted">–í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-center">
            <div class="card-body">
                <div class="h3 text-warning">@(notifications?.Count(n => n.Priority == Sofia.Web.Models.NotificationPriority.High) ?? 0)</div>
                <div class="text-muted">–í–∞–∂–Ω—ã—Ö</div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-center">
            <div class="card-body">
                <div class="h3 text-success">@(notifications?.Count(n => n.Type == Sofia.Web.Models.NotificationType.Achievement) ?? 0)</div>
                <div class="text-muted">–î–æ—Å—Ç–∏–∂–µ–Ω–∏–π</div>
            </div>
        </div>
    </div>
</div>

<!-- Notifications List -->
<div class="card">
    <div class="card-header">
        <h5 class="mb-0">üì¨ –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h5>
    </div>
    <div class="card-body p-0">
        @if (notifications?.Any() == true)
        {
            <div class="notifications-list">
                @foreach (var notification in notifications)
                {
                    <div class="notification-item @(notification.IsRead ? "read" : "unread") @GetPriorityClass(notification.Priority)" 
                         data-id="@notification.Id">
                        <div class="notification-content">
                            <div class="d-flex align-items-start">
                                <div class="notification-icon me-3">
                                    @GetNotificationIcon(notification.Type)
                                </div>
                                <div class="flex-grow-1">
                                    <div class="d-flex justify-content-between align-items-start mb-1">
                                        <h6 class="notification-title mb-0">@notification.Title</h6>
                                        <div class="notification-actions">
                                            @if (!notification.IsRead)
                                            {
                                                <button class="btn btn-sm btn-outline-primary me-1" onclick="markAsRead(@notification.Id)">
                                                    ‚úì
                                                </button>
                                            }
                                            <button class="btn btn-sm btn-outline-secondary" onclick="dismissNotification(@notification.Id)">
                                                ‚úï
                                            </button>
                                        </div>
                                    </div>
                                    <p class="notification-message mb-2">@notification.Message</p>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <small class="text-muted">@notification.CreatedAt.ToString("dd.MM.yyyy HH:mm")</small>
                                        @if (!string.IsNullOrEmpty(notification.ActionUrl))
                                        {
                                            <a href="@notification.ActionUrl" class="btn btn-sm btn-outline-primary">
                                                @(notification.ActionText ?? "–ü–µ—Ä–µ–π—Ç–∏")
                                            </a>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="text-center py-5">
                <div class="mb-3" style="font-size: 48px;">üîî</div>
                <h4 class="text-muted">–ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h4>
                <p class="text-muted">–ó–¥–µ—Å—å –±—É–¥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</p>
                <button class="btn btn-primary" onclick="sendTestNotification()">üß™ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ</button>
            </div>
        }
    </div>
</div>

<!-- Quick Actions -->
<div class="card mt-4">
    <div class="card-header">
        <h6 class="mb-0">‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h6>
    </div>
    <div class="card-body">
        <div class="row g-2">
            <div class="col-md-3">
                <button class="btn btn-outline-primary w-100" onclick="createReminder('daily')">
                    üìù –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                </button>
            </div>
            <div class="col-md-3">
                <button class="btn btn-outline-success w-100" onclick="createReminder('mood')">
                    üòä –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
                </button>
            </div>
            <div class="col-md-3">
                <button class="btn btn-outline-info w-100" onclick="createReminder('goal')">
                    üéØ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ü–µ–ª–∏
                </button>
            </div>
            <div class="col-md-3">
                <button class="btn btn-outline-warning w-100" onclick="createReminder('practice')">
                    üßò –ü—Ä–∞–∫—Ç–∏–∫–∞ –º–µ–¥–∏—Ç–∞—Ü–∏–∏
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Create Notification Modal -->
<div class="modal fade" id="createNotificationModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">üîî –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="createNotificationForm">
                    <div class="mb-3">
                        <label for="notificationTitle" class="form-label">–ó–∞–≥–æ–ª–æ–≤–æ–∫</label>
                        <input type="text" class="form-control" id="notificationTitle" name="title" required>
                    </div>
                    <div class="mb-3">
                        <label for="notificationMessage" class="form-label">–°–æ–æ–±—â–µ–Ω–∏–µ</label>
                        <textarea class="form-control" id="notificationMessage" name="message" rows="3"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="notificationType" class="form-label">–¢–∏–ø</label>
                        <select class="form-select" id="notificationType" name="type">
                            <option value="1">–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</option>
                            <option value="2">–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ü–µ–ª–∏</option>
                            <option value="3">–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è</option>
                            <option value="4">–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∞–∫—Ç–∏–∫–µ</option>
                            <option value="5">–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç</option>
                            <option value="6">–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Å–∏—Ö–æ–ª–æ–≥–µ</option>
                            <option value="7">–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ</option>
                            <option value="8">–°–∏—Å—Ç–µ–º–Ω–æ–µ</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="notificationPriority" class="form-label">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</label>
                        <select class="form-select" id="notificationPriority" name="priority">
                            <option value="1">–ù–∏–∑–∫–∏–π</option>
                            <option value="2" selected>–°—Ä–µ–¥–Ω–∏–π</option>
                            <option value="3">–í—ã—Å–æ–∫–∏–π</option>
                            <option value="4">–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π</option>
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">–û—Ç–º–µ–Ω–∞</button>
                <button type="button" class="btn btn-primary" onclick="submitNotification()">–°–æ–∑–¥–∞—Ç—å</button>
            </div>
        </div>
    </div>
</div>

<style>
.notifications-list {
    max-height: 600px;
    overflow-y: auto;
}

.notification-item {
    padding: 15px 20px;
    border-bottom: 1px solid #f3f4f6;
    transition: all 0.2s ease;
    cursor: pointer;
}

.notification-item:hover {
    background: #f8f9fa;
}

.notification-item.unread {
    background: #f0f9ff;
    border-left: 4px solid #3b82f6;
}

.notification-item.read {
    opacity: 0.7;
}

.notification-item.priority-high {
    border-left-color: #ef4444;
}

.notification-item.priority-critical {
    border-left-color: #dc2626;
    background: #fef2f2;
}

.notification-icon {
    font-size: 24px;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: #f3f4f6;
    border-radius: 50%;
}

.notification-title {
    font-weight: 600;
    color: #1f2937;
}

.notification-message {
    color: #6b7280;
    font-size: 14px;
}

.notification-actions {
    opacity: 0;
    transition: opacity 0.2s ease;
}

.notification-item:hover .notification-actions {
    opacity: 1;
}

.card {
    transition: transform 0.2s ease;
}

.card:hover {
    transform: translateY(-2px);
}
</style>

<script>
function markAsRead(id) {
    fetch(`/notifications/mark-read/${id}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        }
    })
    .then(response => response.json())
    .then(result => {
        if (result.success) {
            const item = document.querySelector(`[data-id="${id}"]`);
            item.classList.remove('unread');
            item.classList.add('read');
            updateUnreadCount();
        }
    });
}

function markAllAsRead() {
    fetch('/notifications/mark-all-read', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        }
    })
    .then(response => response.json())
    .then(result => {
        if (result.success) {
            document.querySelectorAll('.notification-item.unread').forEach(item => {
                item.classList.remove('unread');
                item.classList.add('read');
            });
            updateUnreadCount();
            showToast('–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ—á–∏—Ç–∞–Ω—ã', 'success');
        }
    });
}

function dismissNotification(id) {
    fetch(`/notifications/dismiss/${id}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        }
    })
    .then(response => response.json())
    .then(result => {
        if (result.success) {
            const item = document.querySelector(`[data-id="${id}"]`);
            item.remove();
            updateUnreadCount();
        }
    });
}

function checkNotifications() {
    fetch('/notifications/check')
    .then(response => response.json())
    .then(result => {
        if (result.notifications && result.notifications.length > 0) {
            showToast(`–ü–æ–ª—É—á–µ–Ω–æ ${result.notifications.length} –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`, 'info');
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        } else {
            showToast('–ù–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ—Ç', 'info');
        }
    });
}

function sendTestNotification() {
    fetch('/notifications/test', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        }
    })
    .then(response => response.json())
    .then(result => {
        if (result.success) {
            showToast('–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', 'success');
            setTimeout(() => location.reload(), 1000);
        }
    });
}

function createReminder(type) {
    const modal = new bootstrap.Modal(document.getElementById('createNotificationModal'));
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    const titleField = document.getElementById('notificationTitle');
    const messageField = document.getElementById('notificationMessage');
    const typeField = document.getElementById('notificationType');
    
    switch(type) {
        case 'daily':
            titleField.value = 'üìù –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–ø–∏—Å—å';
            messageField.value = '–í—Ä–µ–º—è –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –º—ã—Å–ª—è–º–∏ –æ –ø—Ä–æ—à–µ–¥—à–µ–º –¥–Ω–µ!';
            typeField.value = '1';
            break;
        case 'mood':
            titleField.value = 'üòä –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è';
            messageField.value = '–ö–∞–∫ –≤—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ? –ó–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ —Ç–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.';
            typeField.value = '3';
            break;
        case 'goal':
            titleField.value = 'üéØ –†–∞–±–æ—Ç–∞ –Ω–∞–¥ —Ü–µ–ª—å—é';
            messageField.value = '–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π!';
            typeField.value = '2';
            break;
        case 'practice':
            titleField.value = 'üßò –ü—Ä–∞–∫—Ç–∏–∫–∞ –º–µ–¥–∏—Ç–∞—Ü–∏–∏';
            messageField.value = '–í—Ä–µ–º—è –¥–ª—è —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è –∏ –º–µ–¥–∏—Ç–∞—Ü–∏–∏.';
            typeField.value = '4';
            break;
    }
    
    modal.show();
}

function submitNotification() {
    const form = document.getElementById('createNotificationForm');
    const formData = new FormData(form);
    
    const data = {
        title: formData.get('title'),
        message: formData.get('message'),
        type: parseInt(formData.get('type')),
        priority: parseInt(formData.get('priority'))
    };
    
    fetch('/notifications/create', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(data)
    })
    .then(response => response.json())
    .then(result => {
        if (result.success) {
            showToast(result.message, 'success');
            bootstrap.Modal.getInstance(document.getElementById('createNotificationModal')).hide();
            form.reset();
            setTimeout(() => location.reload(), 1000);
        } else {
            showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'error');
        }
    });
}

function updateUnreadCount() {
    const unreadItems = document.querySelectorAll('.notification-item.unread').length;
    document.querySelector('.h3.text-primary').textContent = unreadItems;
}

function showToast(message, type) {
    const toast = document.createElement('div');
    toast.className = 'toast-notification';
    toast.textContent = message;
    
    const colors = {
        success: '#10b981',
        error: '#ef4444',
        info: '#3b82f6',
        warning: '#f59e0b'
    };
    
    toast.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${colors[type]};
        color: white;
        padding: 12px 20px;
        border-radius: 6px;
        z-index: 1000;
        animation: slideIn 0.3s ease;
    `;
    
    document.body.appendChild(toast);
    
    setTimeout(() => {
        toast.remove();
    }, 3000);
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
setInterval(checkNotifications, 300000);
</script>

@functions {
    string GetNotificationIcon(Sofia.Web.Models.NotificationType type)
    {
        return type switch
        {
            Sofia.Web.Models.NotificationType.DailyReminder => "üìù",
            Sofia.Web.Models.NotificationType.GoalReminder => "üéØ",
            Sofia.Web.Models.NotificationType.MoodCheck => "üòä",
            Sofia.Web.Models.NotificationType.PracticeReminder => "üßò",
            Sofia.Web.Models.NotificationType.WeeklyReport => "üìä",
            Sofia.Web.Models.NotificationType.PsychologistReminder => "üë•",
            Sofia.Web.Models.NotificationType.Achievement => "üèÜ",
            Sofia.Web.Models.NotificationType.System => "‚öôÔ∏è",
            _ => "üîî"
        };
    }
    
    string GetPriorityClass(Sofia.Web.Models.NotificationPriority priority)
    {
        return priority switch
        {
            Sofia.Web.Models.NotificationPriority.High => "priority-high",
            Sofia.Web.Models.NotificationPriority.Critical => "priority-critical",
            _ => ""
        };
    }
}
