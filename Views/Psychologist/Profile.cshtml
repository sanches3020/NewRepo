@{
    ViewData["Title"] = "–ü—Ä–æ—Ñ–∏–ª—å –ø—Å–∏—Ö–æ–ª–æ–≥–∞";
    var psychologist = ViewBag.Psychologist as Sofia.Web.Models.Psychologist;
    var reviews = ViewBag.Reviews as List<Sofia.Web.Models.PsychologistReview>;
    var availableSlots = ViewBag.AvailableSlots as List<Sofia.Web.Models.PsychologistTimeSlot>;
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2>üë®‚Äç‚öïÔ∏è @psychologist?.Name</h2>
    <a href="/psychologist" class="btn btn-outline-secondary">‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É</a>
</div>

<div class="row g-4">
    <!-- Psychologist Info -->
    <div class="col-lg-8">
        <div class="card mb-4">
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-md-8">
                        <h4 class="text-primary">@psychologist?.Name</h4>
                        <p class="text-muted mb-3">@psychologist?.Specialization</p>
                        <p class="mb-3">@psychologist?.Description</p>
                        
                        <div class="row g-3">
                            <div class="col-md-6">
                                <h6 class="text-success">üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ</h6>
                                <p class="small">@psychologist?.Education</p>
                            </div>
                            <div class="col-md-6">
                                <h6 class="text-info">üíº –û–ø—ã—Ç</h6>
                                <p class="small">@psychologist?.Experience</p>
                            </div>
                            <div class="col-md-6">
                                <h6 class="text-warning">üåç –Ø–∑—ã–∫–∏</h6>
                                <p class="small">@psychologist?.Languages</p>
                            </div>
                            <div class="col-md-6">
                                <h6 class="text-primary">üî¨ –ú–µ—Ç–æ–¥—ã</h6>
                                <p class="small">@psychologist?.Methods</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 text-center">
                        <div class="psychologist-avatar mb-3">
                            <div class="avatar-circle">
                                <div class="avatar-initial">@(psychologist?.Name?.FirstOrDefault().ToString().ToUpper() ?? "–ü")</div>
                            </div>
                        </div>
                        <div class="price-info">
                            <h5 class="text-success">@psychologist?.PricePerHour?.ToString("C0")</h5>
                            <small class="text-muted">–∑–∞ —á–∞—Å</small>
                        </div>
                        <div class="contact-info mt-3">
                            <small class="text-muted">üìû @psychologist?.ContactPhone</small><br>
                            <small class="text-muted">üìß @psychologist?.ContactEmail</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Reviews -->
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="mb-0">‚≠ê –û—Ç–∑—ã–≤—ã (@reviews?.Count)</h5>
            </div>
            <div class="card-body">
                @if (reviews?.Any() == true)
                {
                    @foreach (var review in reviews)
                    {
                        <div class="review-item mb-3 p-3 border rounded">
                            <div class="d-flex justify-content-between align-items-start mb-2">
                                <div class="rating">
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        <span class="star @(i <= review.Rating ? "filled" : "")">‚≠ê</span>
                                    }
                                </div>
                                <small class="text-muted">@review.CreatedAt.ToString("dd.MM.yyyy")</small>
                            </div>
                            @if (!string.IsNullOrEmpty(review.Comment))
                            {
                                <p class="mb-0">@review.Comment</p>
                            }
                        </div>
                    }
                }
                else
                {
                    <div class="text-center text-muted py-3">
                        <div style="font-size: 24px;">‚≠ê</div>
                        <p class="mb-0">–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤</p>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Booking Section -->
    <div class="col-lg-4">
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="mb-0">üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é</h5>
            </div>
            <div class="card-body">
                <form id="bookingForm">
                    <input type="hidden" id="psychologistId" value="@psychologist?.Id">
                    
                    <div class="mb-3">
                        <label for="appointmentDate" class="form-label">–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è</label>
                        <div class="time-slots-container">
                            @if (availableSlots?.Any() == true)
                            {
                                <div class="row g-2">
                                    @foreach (var slot in availableSlots.Where(s => s.IsAvailable && !s.IsBooked).OrderBy(s => s.Date).ThenBy(s => s.StartTime))
                                    {
                                        var slotDateTime = slot.Date.Add(slot.StartTime);
                                        <div class="col-md-4 col-sm-6 col-12">
                                            <button type="button" 
                                                    class="btn w-100 text-start time-slot-btn @(slot.IsBooked ? "btn-secondary disabled" : "btn-outline-primary")"
                                                    @(slot.IsBooked ? "disabled" : "")
                                                    data-slot-date="@slot.Date.ToString("yyyy-MM-dd")"
                                                    data-slot-time="@slot.StartTime.ToString("HH:mm")"
                                                    onclick="selectTimeSlot('@slot.Date.ToString("yyyy-MM-dd")', '@slot.StartTime.ToString("HH:mm")')">
                                                <div class="d-flex justify-content-between align-items-center">
                                                    <div>
                                                        <div class="fw-bold">@slotDateTime.ToString("dd.MM (ddd)")</div>
                                                        <div class="small">@slotDateTime.ToString("HH:mm") - @slot.EndTime.ToString("HH:mm")</div>
                                                    </div>
                                                    @if (slot.IsBooked)
                                                    {
                                                        <span class="badge bg-danger">–ó–∞–Ω—è—Ç–æ</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="badge bg-success">–°–≤–æ–±–æ–¥–Ω–æ</span>
                                                    }
                                                </div>
                                            </button>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="alert alert-info text-center">
                                    <i class="fas fa-calendar-times me-2"></i>
                                    –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏.
                                </div>
                            }
                        </div>
                        <input type="hidden" id="selectedDateTime" name="appointmentDate" required>
                    </div>
                    
                    <div class="mb-3">
                        <label for="notes" class="form-label">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</label>
                        <textarea class="form-control" id="notes" rows="3" placeholder="–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç –∏–ª–∏ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±—Å—É–¥–∏—Ç—å..."></textarea>
                    </div>
                    
                    <button type="button" class="btn btn-primary w-100" onclick="bookAppointment()">
                        üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è
                    </button>
                </form>
            </div>
        </div>

        <!-- Quick Info -->
        <div class="card">
            <div class="card-header">
                <h6 class="mb-0">‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h6>
            </div>
            <div class="card-body">
                <div class="info-item mb-3">
                    <h6 class="text-primary">‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</h6>
                    <p class="small text-muted mb-0">–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –¥–ª–∏—Ç—Å—è 1 —á–∞—Å</p>
                </div>
                <div class="info-item mb-3">
                    <h6 class="text-success">üí∞ –û–ø–ª–∞—Ç–∞</h6>
                    <p class="small text-muted mb-0">–û–ø–ª–∞—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏</p>
                </div>
                <div class="info-item mb-3">
                    <h6 class="text-info">üìû –û—Ç–º–µ–Ω–∞</h6>
                    <p class="small text-muted mb-0">–ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞ 24 —á–∞—Å–∞</p>
                </div>
                <div class="info-item">
                    <h6 class="text-warning">üîí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å</h6>
                    <p class="small text-muted mb-0">–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–≥–æ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã</p>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
.psychologist-avatar {
    margin-bottom: 20px;
}

.avatar-circle {
    width: 80px;
    height: 80px;
    border-radius: 50%;
    background: linear-gradient(135deg, #6b7cff 0%, #9c88ff 100%);
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto;
    box-shadow: 0 4px 12px rgba(107, 124, 255, 0.3);
}

.avatar-initial {
    font-size: 32px;
    font-weight: bold;
    color: white;
}

.price-info h5 {
    margin-bottom: 0;
}

.review-item {
    transition: all 0.2s ease;
}

.review-item:hover {
    background-color: #f8f9fa;
    border-color: #6b7cff !important;
}

.rating .star {
    font-size: 16px;
    opacity: 0.3;
    transition: opacity 0.2s ease;
}

.rating .star.filled {
    opacity: 1;
}

.info-item {
    padding: 10px 0;
    border-bottom: 1px solid #f3f4f6;
}

.info-item:last-child {
    border-bottom: none;
}

.card {
    transition: transform 0.2s ease;
}

.card:hover {
    transform: translateY(-2px);
}

/* –°—Ç–∏–ª–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ */
.time-slots-container {
    max-height: 400px;
    overflow-y: auto;
    border: 1px solid #dee2e6;
    border-radius: 0.375rem;
    padding: 1rem;
    background-color: #f8f9fa;
}

.time-slot-btn {
    transition: all 0.2s ease;
    border: 2px solid transparent;
    min-height: 60px;
}

.time-slot-btn:hover:not(:disabled) {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    border-color: #6b7cff;
}

.time-slot-btn.btn-primary {
    background-color: #6b7cff;
    border-color: #6b7cff;
    color: white;
}

.time-slot-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
}

.form-control:focus, .form-select:focus {
    border-color: #6b7cff;
    box-shadow: 0 0 0 0.2rem rgba(107, 124, 255, 0.25);
}
</style>

<script>
function bookAppointment() {
    const psychologistId = document.getElementById('psychologistId').value;
    const appointmentDate = document.getElementById('appointmentDate').value;
    const notes = document.getElementById('notes').value;

    if (!appointmentDate) {
        showToast('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è', 'error');
        return;
    }

    const appointmentDateTime = new Date(appointmentDate);

    fetch('/psychologist/book', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            psychologistId: parseInt(psychologistId),
            appointmentDate: appointmentDateTime.toISOString(),
            notes: notes
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showToast(data.message, 'success');
            setTimeout(() => {
                window.location.href = '/psychologist/appointments';
            }, 2000);
        } else {
            showToast('–û—à–∏–±–∫–∞: ' + data.message, 'error');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showToast('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏', 'error');
    });
}

function showToast(message, type) {
    const toast = document.createElement('div');
    toast.className = 'toast-notification';
    toast.textContent = message;
    
    const colors = {
        success: '#10b981',
        error: '#ef4444',
        info: '#3b82f6',
        warning: '#f59e0b'
    };
    
    toast.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${colors[type]};
        color: white;
        padding: 12px 20px;
        border-radius: 6px;
        z-index: 1000;
        animation: slideIn 0.3s ease;
    `;
    
    document.body.appendChild(toast);
    
    setTimeout(() => {
        toast.remove();
    }, 3000);
}

// –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
setInterval(function() {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã AJAX –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤
}, 30000);

// –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
let selectedSlot = null;

function selectTimeSlot(date, time) {
    // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–ª–æ—Ç–∞
    document.querySelectorAll('.time-slot-btn').forEach(btn => {
        btn.classList.remove('btn-primary');
        btn.classList.add('btn-outline-primary');
    });

    // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ—Ç
    const selectedBtn = event.target.closest('.time-slot-btn');
    selectedBtn.classList.remove('btn-outline-primary');
    selectedBtn.classList.add('btn-primary');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    selectedSlot = date + 'T' + time;
    document.getElementById('selectedDateTime').value = selectedSlot;
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–ø–∏—Å–∏
function bookAppointment() {
    if (!selectedSlot) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏');
        return;
    }

    const form = document.getElementById('bookingForm');
    const formData = new FormData(form);
    
    const data = {
        psychologistId: parseInt(formData.get('psychologistId')),
        appointmentDate: selectedSlot,
        notes: formData.get('notes')
    };
    
    fetch('/psychologist/book', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(data)
    })
    .then(response => response.json())
    .then(result => {
        if (result.success) {
            alert(result.message);
            location.reload();
        } else {
            alert('–û—à–∏–±–∫–∞: ' + result.message);
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é');
    });
}
</script>
