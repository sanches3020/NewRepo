@{
    ViewData["Title"] = "–ü—Å–∏—Ö–æ–ª–æ–≥–∏";
    var psychologists = ViewBag.Psychologists as List<Sofia.Web.Models.Psychologist>;
    var recentNotes = ViewBag.RecentNotes as List<Sofia.Web.Models.Note>;
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2>üë• –ü—Å–∏—Ö–æ–ª–æ–≥–∏</h2>
    <div class="d-flex gap-2">
        <a href="/psychologist/appointments" class="btn btn-outline-info btn-sm">üìÖ –ú–æ–∏ –∑–∞–ø–∏—Å–∏</a>
        <a href="/notes/create" class="btn btn-outline-primary btn-sm">üìù –ó–∞–º–µ—Ç–∫–∞</a>
    </div>
</div>

<!-- Recent Shared Notes -->
@if (recentNotes?.Any() == true)
{
    <div class="card mb-4">
        <div class="card-header">
            <h6 class="mb-0">üì§ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞</h6>
        </div>
        <div class="card-body">
            <div class="row g-3">
                @foreach (var note in recentNotes.Take(3))
                {
                    <div class="col-md-4">
                        <div class="card h-100">
                            <div class="card-body">
                                <div class="d-flex align-items-center mb-2">
                                    <span class="me-2">@GetEmotionEmoji(note.Emotion)</span>
                                    <span class="badge bg-secondary">@GetEmotionName(note.Emotion)</span>
                                </div>
                                <p class="card-text small">@(note.Content.Length > 100 ? note.Content.Substring(0, 100) + "..." : note.Content)</p>
                                <small class="text-muted">@note.CreatedAt.ToString("dd.MM.yyyy HH:mm")</small>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

<!-- Psychologists List -->
<div class="row g-4">
    @if (psychologists?.Any() == true)
    {
        @foreach (var psychologist in psychologists)
        {
            <div class="col-lg-6">
                <div class="card h-100">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-start mb-3">
                            <div>
                                <h5 class="card-title mb-1">@psychologist.Name</h5>
                                <p class="text-muted mb-2">@psychologist.Specialization</p>
                            </div>
                            <div class="text-end">
                                @if (psychologist.PricePerHour.HasValue)
                                {
                                    <div class="h6 text-primary mb-0">@psychologist.PricePerHour.Value.ToString("N0") ‚ÇΩ/—á–∞—Å</div>
                                }
                            </div>
                        </div>

                        <p class="card-text">@psychologist.Description</p>

                        <div class="row g-2 mb-3">
                            <div class="col-6">
                                <small class="text-muted">–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</small><br>
                                <small>@psychologist.Education</small>
                            </div>
                            <div class="col-6">
                                <small class="text-muted">–û–ø—ã—Ç:</small><br>
                                <small>@psychologist.Experience</small>
                            </div>
                        </div>

                        <div class="row g-2 mb-3">
                            <div class="col-6">
                                <small class="text-muted">–Ø–∑—ã–∫–∏:</small><br>
                                <small>@psychologist.Languages</small>
                            </div>
                            <div class="col-6">
                                <small class="text-muted">–ú–µ—Ç–æ–¥—ã:</small><br>
                                <small>@psychologist.Methods</small>
                            </div>
                        </div>

                        <!-- Contact Info -->
                        <div class="contact-info mb-3">
                            @if (!string.IsNullOrEmpty(psychologist.ContactPhone))
                            {
                                <div class="d-flex align-items-center mb-1">
                                    <span class="me-2">üìû</span>
                                    <small>@psychologist.ContactPhone</small>
                                </div>
                            }
                            @if (!string.IsNullOrEmpty(psychologist.ContactEmail))
                            {
                                <div class="d-flex align-items-center mb-1">
                                    <span class="me-2">‚úâÔ∏è</span>
                                    <small>@psychologist.ContactEmail</small>
                                </div>
                            }
                        </div>

                        <!-- Action Buttons -->
                        <div class="d-flex gap-2">
                            <a href="/psychologist/profile/@psychologist.Id" class="btn btn-primary btn-sm flex-fill">
                                üë§ –ü—Ä–æ—Ñ–∏–ª—å
                            </a>
                            <button class="btn btn-outline-success btn-sm" onclick="bookAppointment(@psychologist.Id)">
                                üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="col-12">
            <div class="text-center py-5">
                <div class="mb-3" style="font-size: 48px;">üë•</div>
                <h4 class="text-muted">–ü—Å–∏—Ö–æ–ª–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h4>
                <p class="text-muted">–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤</p>
            </div>
        </div>
    }
</div>

<div class="page-bottom-spacer"></div>

<!-- Booking Modal -->
<div class="modal fade" id="bookingModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">üìÖ –ó–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="bookingForm">
                    <input type="hidden" id="psychologistId" name="psychologistId">
                    
                    <div class="mb-3">
                        <label for="appointmentDate" class="form-label">–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è</label>
                        <input type="datetime-local" class="form-control" id="appointmentDate" name="appointmentDate" required>
                    </div>
                    
                    <div class="mb-3">
                        <label for="notes" class="form-label">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏</label>
                        <textarea class="form-control" id="notes" name="notes" rows="3" placeholder="–û–ø–∏—à–∏—Ç–µ, —Å —á–µ–º —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å..."></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">–û—Ç–º–µ–Ω–∞</button>
                <button type="button" class="btn btn-primary" onclick="submitBooking()">–ó–∞–ø–∏—Å–∞—Ç—å—Å—è</button>
            </div>
        </div>
    </div>
</div>

<style>
.contact-info {
    background: #f8f9fa;
    padding: 10px;
    border-radius: 6px;
}

.card {
    transition: transform 0.2s ease;
}

.card:hover {
    transform: translateY(-2px);
}

.psychologist-card {
    border-left: 4px solid #6b7cff;
}
</style>

<script>
function bookAppointment(psychologistId) {
    document.getElementById('psychologistId').value = psychologistId;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É (–∑–∞–≤—Ç—Ä–∞)
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    tomorrow.setHours(9, 0, 0, 0);
    
    document.getElementById('appointmentDate').min = tomorrow.toISOString().slice(0, 16);
    
    const modal = new bootstrap.Modal(document.getElementById('bookingModal'));
    modal.show();
}

function submitBooking() {
    const form = document.getElementById('bookingForm');
    const formData = new FormData(form);
    
    const data = {
        psychologistId: parseInt(formData.get('psychologistId')),
        appointmentDate: formData.get('appointmentDate'),
        notes: formData.get('notes')
    };
    
    fetch('/psychologist/book', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(data)
    })
    .then(response => response.json())
    .then(result => {
        if (result.success) {
            alert(result.message);
            bootstrap.Modal.getInstance(document.getElementById('bookingModal')).hide();
            form.reset();
        } else {
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏');
    });
}
</script>

@functions {
    string GetEmotionEmoji(Sofia.Web.Models.EmotionType emotion)
    {
        return emotion switch
        {
            Sofia.Web.Models.EmotionType.VerySad => "üò¢",
            Sofia.Web.Models.EmotionType.Sad => "üòî",
            Sofia.Web.Models.EmotionType.Neutral => "üòê",
            Sofia.Web.Models.EmotionType.Happy => "üòä",
            Sofia.Web.Models.EmotionType.VeryHappy => "üòÑ",
            Sofia.Web.Models.EmotionType.Anxious => "üò∞",
            Sofia.Web.Models.EmotionType.Calm => "üòå",
            Sofia.Web.Models.EmotionType.Excited => "ü§©",
            Sofia.Web.Models.EmotionType.Frustrated => "üò§",
            Sofia.Web.Models.EmotionType.Grateful => "üôè",
            _ => "üòê"
        };
    }
    
    string GetEmotionName(Sofia.Web.Models.EmotionType emotion)
    {
        return emotion switch
        {
            Sofia.Web.Models.EmotionType.VerySad => "–û—á–µ–Ω—å –≥—Ä—É—Å—Ç–Ω–æ",
            Sofia.Web.Models.EmotionType.Sad => "–ì—Ä—É—Å—Ç–Ω–æ",
            Sofia.Web.Models.EmotionType.Neutral => "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ",
            Sofia.Web.Models.EmotionType.Happy => "–†–∞–¥–æ—Å—Ç–Ω–æ",
            Sofia.Web.Models.EmotionType.VeryHappy => "–û—á–µ–Ω—å —Ä–∞–¥–æ—Å—Ç–Ω–æ",
            Sofia.Web.Models.EmotionType.Anxious => "–¢—Ä–µ–≤–æ–∂–Ω–æ",
            Sofia.Web.Models.EmotionType.Calm => "–°–ø–æ–∫–æ–π–Ω–æ",
            Sofia.Web.Models.EmotionType.Excited => "–í–∑–≤–æ–ª–Ω–æ–≤–∞–Ω–Ω–æ",
            Sofia.Web.Models.EmotionType.Frustrated => "–†–∞–∑–¥—Ä–∞–∂—ë–Ω–Ω–æ",
            Sofia.Web.Models.EmotionType.Grateful => "–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ",
            _ => emotion.ToString()
        };
    }
}


