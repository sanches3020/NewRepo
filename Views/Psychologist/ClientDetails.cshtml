@{
    ViewData["Title"] = "–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞";
    var client = ViewBag.Client as Sofia.Web.Models.User;
    var clientNotes = ViewBag.ClientNotes as List<Sofia.Web.Models.Note>;
    var clientGoals = ViewBag.ClientGoals as List<Sofia.Web.Models.Goal>;
    var clientEmotions = ViewBag.ClientEmotions as List<Sofia.Web.Models.EmotionEntry>;
    var appointments = ViewBag.Appointments as List<Sofia.Web.Models.PsychologistAppointment>;
    var psychologist = ViewBag.Psychologist as Sofia.Web.Models.Psychologist;
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2>üë§ –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞: @client.Username</h2>
    <div>
        <a href="/psychologist/dashboard/@psychologist.Id" class="btn btn-outline-secondary">‚Üê –ù–∞–∑–∞–¥ –∫ –¥–∞—à–±–æ—Ä–¥—É</a>
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addRecommendationModal">
            üí° –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
        </button>
    </div>
</div>

<div class="row g-4">
    <!-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ -->
    <div class="col-lg-4">
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="mb-0">üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ</h5>
            </div>
            <div class="card-body">
                <div class="d-flex align-items-center mb-3">
                    <div class="avatar-circle me-3">
                        <div class="avatar-initial">@(client.Username?.FirstOrDefault().ToString().ToUpper() ?? "–ö")</div>
                    </div>
                    <div>
                        <h6 class="mb-0">@client.Username</h6>
                        <small class="text-muted">@client.Email</small>
                    </div>
                </div>
                
                <div class="client-stats">
                    <div class="stat-item d-flex justify-content-between mb-2">
                        <span>–ó–∞–º–µ—Ç–æ–∫:</span>
                        <span class="text-primary">@clientNotes.Count</span>
                    </div>
                    <div class="stat-item d-flex justify-content-between mb-2">
                        <span>–¶–µ–ª–µ–π:</span>
                        <span class="text-success">@clientGoals.Count</span>
                    </div>
                    <div class="stat-item d-flex justify-content-between mb-2">
                        <span>–≠–º–æ—Ü–∏–π:</span>
                        <span class="text-info">@clientEmotions.Count</span>
                    </div>
                    <div class="stat-item d-flex justify-content-between mb-2">
                        <span>–°–µ—Å—Å–∏–π:</span>
                        <span class="text-warning">@appointments.Count</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- –ò—Å—Ç–æ—Ä–∏—è —Å–µ—Å—Å–∏–π -->
        <div class="card">
            <div class="card-header">
                <h6 class="mb-0">üìÖ –ò—Å—Ç–æ—Ä–∏—è —Å–µ—Å—Å–∏–π</h6>
            </div>
            <div class="card-body">
                @if (appointments?.Any() == true)
                {
                    @foreach (var appointment in appointments.Take(5))
                    {
                        <div class="session-item mb-3 p-2 border rounded">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <div class="fw-bold">@appointment.AppointmentDate.ToString("dd.MM.yyyy HH:mm")</div>
                                    <small class="text-muted">@GetStatusName(appointment.Status)</small>
                                </div>
                                <span class="badge @GetStatusBadgeClass(appointment.Status)">@GetStatusName(appointment.Status)</span>
                            </div>
                            @if (!string.IsNullOrEmpty(appointment.Notes))
                            {
                                <div class="mt-2">
                                    <small class="text-muted">@appointment.Notes</small>
                                </div>
                            }
                        </div>
                    }
                }
                else
                {
                    <p class="text-muted small">–°–µ—Å—Å–∏–π –ø–æ–∫–∞ –Ω–µ—Ç</p>
                }
            </div>
        </div>
    </div>

    <!-- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç -->
    <div class="col-lg-8">
        <!-- –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ -->
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="mb-0">üòä –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ</h5>
            </div>
            <div class="card-body">
                @if (clientEmotions?.Any() == true)
                {
                    <div class="row g-3">
                        @foreach (var emotion in clientEmotions.Take(10))
                        {
                            <div class="col-md-6">
                                <div class="emotion-item p-3 border rounded">
                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <div class="d-flex align-items-center">
                                            <span class="me-2" style="font-size: 1.5rem;">@GetEmotionEmoji(emotion.Emotion)</span>
                                            <strong>@GetEmotionName(emotion.Emotion)</strong>
                                        </div>
                                        <small class="text-muted">@emotion.Date.ToString("dd.MM.yyyy")</small>
                                    </div>
                                    @if (!string.IsNullOrEmpty(emotion.Note))
                                    {
                                        <p class="mb-0 text-muted small">@emotion.Note</p>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <p class="text-muted text-center">–ö–ª–∏–µ–Ω—Ç –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–ª —ç–º–æ—Ü–∏–∏</p>
                }
            </div>
        </div>

        <!-- –¶–µ–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞ -->
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="mb-0">üéØ –¶–µ–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞</h5>
            </div>
            <div class="card-body">
                @if (clientGoals?.Any() == true)
                {
                    <div class="row g-3">
                        @foreach (var goal in clientGoals.Take(6))
                        {
                            <div class="col-md-6">
                                <div class="goal-item p-3 border rounded">
                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <h6 class="mb-0">@goal.Title</h6>
                                        <span class="badge @GetGoalStatusBadgeClass(goal.Status)">@GetGoalStatusName(goal.Status)</span>
                                    </div>
                                    <p class="mb-2 text-muted small">@goal.Description</p>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <small class="text-muted">@goal.CreatedAt.ToString("dd.MM.yyyy")</small>
                                        @if (goal.TargetDate.HasValue)
                                        {
                                            <small class="text-muted">–¥–æ @goal.TargetDate.Value.ToString("dd.MM.yyyy")</small>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <p class="text-muted text-center">–ö–ª–∏–µ–Ω—Ç –ø–æ–∫–∞ –Ω–µ —Å—Ç–∞–≤–∏–ª —Ü–µ–ª–µ–π</p>
                }
            </div>
        </div>

        <!-- –ó–∞–º–µ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ -->
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">üìù –ó–∞–º–µ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞</h5>
            </div>
            <div class="card-body">
                @if (clientNotes?.Any() == true)
                {
                    @foreach (var note in clientNotes.Take(5))
                    {
                        <div class="note-item mb-3 p-3 border rounded">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <div class="d-flex align-items-center">
                                    <span class="me-2">@GetEmotionEmoji(note.Emotion)</span>
                                    <strong>@note.Date.ToString("dd.MM.yyyy")</strong>
                                </div>
                                <small class="text-muted">@note.CreatedAt.ToString("HH:mm")</small>
                            </div>
                            <p class="mb-2">@note.Content</p>
                            @if (!string.IsNullOrEmpty(note.Tags))
                            {
                                <div class="mb-2">
                                    @foreach (var tag in note.Tags.Split(',', StringSplitOptions.RemoveEmptyEntries))
                                    {
                                        <span class="badge bg-secondary me-1">#@tag.Trim()</span>
                                    }
                                </div>
                            }
                            @if (!string.IsNullOrEmpty(note.Activity))
                            {
                                <div>
                                    <span class="badge bg-info">@note.Activity</span>
                                </div>
                            }
                        </div>
                    }
                }
                else
                {
                    <p class="text-muted text-center">–ö–ª–∏–µ–Ω—Ç –ø–æ–∫–∞ –Ω–µ –¥–µ–ª–∏–ª—Å—è –∑–∞–º–µ—Ç–∫–∞–º–∏</p>
                }
            </div>
        </div>
    </div>
</div>

<!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ -->
<div class="modal fade" id="addRecommendationModal" tabindex="-1" aria-labelledby="addRecommendationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addRecommendationModalLabel">–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –¥–ª—è @client.Username</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="recommendationForm">
                    <div class="mb-3">
                        <label for="recommendationType" class="form-label">–¢–∏–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</label>
                        <select class="form-select" id="recommendationType" name="recommendationType" required>
                            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø</option>
                            <option value="breathing">–î—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞</option>
                            <option value="meditation">–ú–µ–¥–∏—Ç–∞—Ü–∏—è</option>
                            <option value="exercise">–§–∏–∑–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è</option>
                            <option value="goal">–û–±—Å—É–∂–¥–µ–Ω–∏–µ —Ü–µ–ª–∏</option>
                            <option value="emotion">–†–∞–±–æ—Ç–∞ —Å —ç–º–æ—Ü–∏—è–º–∏</option>
                            <option value="note">–í–µ–¥–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–∏–∫–∞</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="recommendationText" class="form-label">–¢–µ–∫—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</label>
                        <textarea class="form-control" id="recommendationText" name="recommendationText" rows="4" required placeholder="–û–ø–∏—à–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞..."></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="priority" class="form-label">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</label>
                        <select class="form-select" id="priority" name="priority">
                            <option value="low">–ù–∏–∑–∫–∏–π</option>
                            <option value="medium" selected>–°—Ä–µ–¥–Ω–∏–π</option>
                            <option value="high">–í—ã—Å–æ–∫–∏–π</option>
                        </select>
                    </div>
                    <button type="button" class="btn btn-primary" onclick="addRecommendation()">–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é</button>
                </form>
            </div>
        </div>
    </div>
</div>

<style>
.avatar-circle {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    background: linear-gradient(135deg, #6b7cff 0%, #9c88ff 100%);
    display: flex;
    align-items: center;
    justify-content: center;
}

.avatar-initial {
    font-size: 24px;
    font-weight: bold;
    color: white;
}

.emotion-item, .goal-item, .note-item, .session-item {
    transition: all 0.2s ease;
}

.emotion-item:hover, .goal-item:hover, .note-item:hover, .session-item:hover {
    background-color: #f8f9fa;
    border-color: #6b7cff !important;
}

.client-stats .stat-item {
    padding: 5px 0;
    border-bottom: 1px solid #eee;
}

.client-stats .stat-item:last-child {
    border-bottom: none;
}
</style>

<script>
function addRecommendation() {
    const form = document.getElementById('recommendationForm');
    const formData = new FormData(form);
    
    const data = {
        clientId: @client.Id,
        recommendationType: formData.get('recommendationType'),
        recommendationText: formData.get('recommendationText'),
        priority: formData.get('priority')
    };
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    alert('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ @client.Username! (–§—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏)');
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = bootstrap.Modal.getInstance(document.getElementById('addRecommendationModal'));
    modal.hide();
    
    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
    form.reset();
}
</script>

@functions {
    string GetEmotionEmoji(Sofia.Web.Models.EmotionType emotion)
    {
        return emotion switch
        {
            Sofia.Web.Models.EmotionType.VerySad => "üò¢",
            Sofia.Web.Models.EmotionType.Sad => "üòî",
            Sofia.Web.Models.EmotionType.Neutral => "üòê",
            Sofia.Web.Models.EmotionType.Happy => "üòä",
            Sofia.Web.Models.EmotionType.VeryHappy => "üòÑ",
            Sofia.Web.Models.EmotionType.Anxious => "üò∞",
            Sofia.Web.Models.EmotionType.Calm => "üòå",
            Sofia.Web.Models.EmotionType.Excited => "ü§©",
            Sofia.Web.Models.EmotionType.Frustrated => "üò§",
            Sofia.Web.Models.EmotionType.Grateful => "üôè",
            _ => "üòê"
        };
    }
    
    string GetEmotionName(Sofia.Web.Models.EmotionType emotion)
    {
        return emotion switch
        {
            Sofia.Web.Models.EmotionType.VerySad => "–û—á–µ–Ω—å –≥—Ä—É—Å—Ç–Ω–æ",
            Sofia.Web.Models.EmotionType.Sad => "–ì—Ä—É—Å—Ç–Ω–æ",
            Sofia.Web.Models.EmotionType.Neutral => "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ",
            Sofia.Web.Models.EmotionType.Happy => "–†–∞–¥–æ—Å—Ç–Ω–æ",
            Sofia.Web.Models.EmotionType.VeryHappy => "–û—á–µ–Ω—å —Ä–∞–¥–æ—Å—Ç–Ω–æ",
            Sofia.Web.Models.EmotionType.Anxious => "–¢—Ä–µ–≤–æ–∂–Ω–æ",
            Sofia.Web.Models.EmotionType.Calm => "–°–ø–æ–∫–æ–π–Ω–æ",
            Sofia.Web.Models.EmotionType.Excited => "–í–∑–≤–æ–ª–Ω–æ–≤–∞–Ω–Ω–æ",
            Sofia.Web.Models.EmotionType.Frustrated => "–†–∞–∑–¥—Ä–∞–∂—ë–Ω–Ω–æ",
            Sofia.Web.Models.EmotionType.Grateful => "–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ",
            _ => emotion.ToString()
        };
    }

    string GetStatusBadgeClass(Sofia.Web.Models.AppointmentStatus status)
    {
        return status switch
        {
            Sofia.Web.Models.AppointmentStatus.Scheduled => "bg-primary",
            Sofia.Web.Models.AppointmentStatus.Confirmed => "bg-success",
            Sofia.Web.Models.AppointmentStatus.Completed => "bg-info",
            Sofia.Web.Models.AppointmentStatus.Cancelled => "bg-danger",
            Sofia.Web.Models.AppointmentStatus.NoShow => "bg-warning",
            _ => "bg-secondary"
        };
    }
    
    string GetStatusName(Sofia.Web.Models.AppointmentStatus status)
    {
        return status switch
        {
            Sofia.Web.Models.AppointmentStatus.Scheduled => "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ",
            Sofia.Web.Models.AppointmentStatus.Confirmed => "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ",
            Sofia.Web.Models.AppointmentStatus.Completed => "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
            Sofia.Web.Models.AppointmentStatus.Cancelled => "–û—Ç–º–µ–Ω–µ–Ω–æ",
            Sofia.Web.Models.AppointmentStatus.NoShow => "–ù–µ —è–≤–∏–ª—Å—è",
            _ => status.ToString()
        };
    }

    string GetGoalStatusBadgeClass(Sofia.Web.Models.GoalStatus status)
    {
        return status switch
        {
            Sofia.Web.Models.GoalStatus.Completed => "bg-success",
            Sofia.Web.Models.GoalStatus.Active => "bg-primary",
            Sofia.Web.Models.GoalStatus.Paused => "bg-warning",
            Sofia.Web.Models.GoalStatus.Cancelled => "bg-danger",
            _ => "bg-secondary"
        };
    }

    string GetGoalStatusName(Sofia.Web.Models.GoalStatus status)
    {
        return status switch
        {
            Sofia.Web.Models.GoalStatus.Completed => "–ó–∞–≤–µ—Ä—à–µ–Ω–∞",
            Sofia.Web.Models.GoalStatus.Active => "–ê–∫—Ç–∏–≤–Ω–∞",
            Sofia.Web.Models.GoalStatus.Paused => "–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
            Sofia.Web.Models.GoalStatus.Cancelled => "–û—Ç–º–µ–Ω–µ–Ω–∞",
            _ => status.ToString()
        };
    }
}
