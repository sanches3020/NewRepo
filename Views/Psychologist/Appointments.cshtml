@{
    ViewData["Title"] = "–ú–æ–∏ –∑–∞–ø–∏—Å–∏";
    var appointments = ViewBag.Appointments as List<Sofia.Web.Models.PsychologistAppointment>;
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2>üìÖ –ú–æ–∏ –∑–∞–ø–∏—Å–∏</h2>
    <a href="/psychologist" class="btn btn-outline-secondary btn-sm">‚Üê –ö —Å–ø–∏—Å–∫—É –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤</a>
    </div>

@if (appointments == null || !appointments.Any())
{
    <div class="text-center py-5">
        <div class="mb-3" style="font-size: 48px;">üì≠</div>
        <h4 class="text-muted">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π</h4>
        <p class="text-muted">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –∏ –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è</p>
        <a href="/psychologist" class="btn btn-primary">–ù–∞–π—Ç–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∞</a>
    </div>
}
else
{
    <div class="row g-3">
        @foreach (var a in appointments)
        {
            var isPast = a.AppointmentDate <= DateTime.Now;
            <div class="col-12">
                <div class="card h-100">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-start">
                            <div>
                                <div class="h5 mb-1">@a.Psychologist?.Name</div>
                                <div class="text-muted mb-2">@a.AppointmentDate.ToString("dd.MM.yyyy HH:mm")</div>
                                @if (!string.IsNullOrWhiteSpace(a.Notes))
                                {
                                    <div class="small text-muted">–ó–∞–º–µ—Ç–∫–∏: @a.Notes</div>
                                }
                            </div>
                            <div class="text-end">
                                <span class="badge @GetStatusBadge(a.Status)">@GetStatusText(a.Status)</span>
                            </div>
                        </div>
                    </div>
                    <div class="card-footer bg-transparent d-flex justify-content-between">
                        <div class="text-muted small">–°–æ–∑–¥–∞–Ω–æ: @a.CreatedAt.ToString("dd.MM.yyyy HH:mm")</div>
                        <div class="d-flex gap-2">
                            @if (!isPast && a.Status == Sofia.Web.Models.AppointmentStatus.Scheduled)
                            {
                                <button class="btn btn-outline-danger btn-sm" onclick="cancelAppointment(@a.Id)">–û—Ç–º–µ–Ω–∏—Ç—å</button>
                            }
                            <a href="/psychologist/profile/@a.PsychologistId" class="btn btn-outline-primary btn-sm">–ü—Ä–æ—Ñ–∏–ª—å</a>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

<script>
function cancelAppointment(id) {
    if (!confirm('–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å?')) return;
    fetch(`/psychologist/appointments/cancel/${id}`, {
        method: 'POST'
    }).then(r => r.json()).then(res => {
        if (res.success) {
            location.reload();
        } else {
            alert(res.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å');
        }
    }).catch(() => alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏'));
}
</script>

@functions {
    string GetStatusText(Sofia.Web.Models.AppointmentStatus status)
    {
        return status switch
        {
            Sofia.Web.Models.AppointmentStatus.Scheduled => "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞",
            Sofia.Web.Models.AppointmentStatus.Completed => "–ó–∞–≤–µ—Ä—à–µ–Ω–∞",
            Sofia.Web.Models.AppointmentStatus.Cancelled => "–û—Ç–º–µ–Ω–µ–Ω–∞",
            _ => status.ToString()
        };
    }

    string GetStatusBadge(Sofia.Web.Models.AppointmentStatus status)
    {
        return status switch
        {
            Sofia.Web.Models.AppointmentStatus.Scheduled => "bg-primary",
            Sofia.Web.Models.AppointmentStatus.Completed => "bg-success",
            Sofia.Web.Models.AppointmentStatus.Cancelled => "bg-secondary",
            _ => "bg-light text-dark"
        };
    }
}


