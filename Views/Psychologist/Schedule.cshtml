@{
    ViewData["Title"] = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º";
    var psychologist = ViewBag.Psychologist as Sofia.Web.Models.Psychologist;
    var schedules = ViewBag.Schedules as List<Sofia.Web.Models.PsychologistSchedule>;
    var existingSlots = ViewBag.ExistingSlots as List<Sofia.Web.Models.PsychologistTimeSlot>;
    var startDate = (DateTime)ViewBag.StartDate;
    var endDate = (DateTime)ViewBag.EndDate;
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2>üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º</h2>
    <div>
        <a href="/psychologist/dashboard/@psychologist.Id" class="btn btn-outline-secondary">‚Üê –ù–∞–∑–∞–¥ –∫ –¥–∞—à–±–æ—Ä–¥—É</a>
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addScheduleModal">
            ‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è
        </button>
    </div>
</div>

<div class="row g-4">
    <!-- –¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ -->
    <div class="col-lg-6">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">üìã –¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</h5>
            </div>
            <div class="card-body">
                @if (schedules?.Any() == true)
                {
                    <div class="schedule-list">
                        @foreach (var schedule in schedules)
                        {
                            <div class="schedule-item d-flex justify-content-between align-items-center p-3 border rounded mb-2">
                                <div>
                                    <div class="fw-bold">@GetDayName(schedule.DayOfWeek)</div>
                                    <div class="text-muted">@schedule.StartTime.ToString(@"hh\:mm") - @schedule.EndTime.ToString(@"hh\:mm")</div>
                                </div>
                                <div>
                                    <span class="badge @(schedule.IsAvailable ? "bg-success" : "bg-secondary")">
                                        @(schedule.IsAvailable ? "–ê–∫—Ç–∏–≤–Ω–æ" : "–ù–µ–∞–∫—Ç–∏–≤–Ω–æ")
                                    </span>
                                    <button type="button" class="btn btn-sm btn-outline-danger ms-2" 
                                            onclick="removeSchedule(@schedule.Id)">
                                        üóëÔ∏è
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="text-center text-muted py-4">
                        <div style="font-size: 48px;">üìÖ</div>
                        <h5 class="mt-3">–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ</h5>
                        <p class="mb-0">–î–æ–±–∞–≤—å—Ç–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã, —á—Ç–æ–±—ã –∫–ª–∏–µ–Ω—Ç—ã –º–æ–≥–ª–∏ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è</p>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞–º–∏ -->
    <div class="col-lg-6">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">‚è∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞–º–∏</h5>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <p class="text-muted">–°–æ–∑–¥–∞–π—Ç–µ —Å–ª–æ—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è</p>
                    <button type="button" class="btn btn-success" onclick="generateSlots()">
                        üîÑ –°–æ–∑–¥–∞—Ç—å —Å–ª–æ—Ç—ã –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏
                    </button>
                </div>
                
                <div class="slots-stats">
                    <div class="row g-2">
                        <div class="col-6">
                            <div class="stat-card text-center p-3 border rounded">
                                <div class="h4 text-primary">@existingSlots.Count</div>
                                <div class="small text-muted">–í—Å–µ–≥–æ —Å–ª–æ—Ç–æ–≤</div>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="stat-card text-center p-3 border rounded">
                                <div class="h4 text-success">@existingSlots.Count(s => s.IsAvailable && !s.IsBooked)</div>
                                <div class="small text-muted">–°–≤–æ–±–æ–¥–Ω—ã—Ö</div>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="stat-card text-center p-3 border rounded">
                                <div class="h4 text-danger">@existingSlots.Count(s => s.IsBooked)</div>
                                <div class="small text-muted">–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö</div>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="stat-card text-center p-3 border rounded">
                                <div class="h4 text-warning">@existingSlots.Count(s => !s.IsAvailable)</div>
                                <div class="small text-muted">–ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–ª–æ—Ç–æ–≤ -->
<div class="row g-4 mt-4">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">üìä –°–ª–æ—Ç—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏</h5>
            </div>
            <div class="card-body">
                @if (existingSlots?.Any() == true)
                {
                    <div class="slots-calendar">
                        @for (var date = startDate; date <= endDate; date = date.AddDays(1))
                        {
                            var daySlots = existingSlots.Where(s => s.Date.Date == date.Date).OrderBy(s => s.StartTime).ToList();
                            if (daySlots.Any())
                            {
                                <div class="day-slots mb-3 p-3 border rounded">
                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <h6 class="mb-0">@date.ToString("dd.MM.yyyy (dddd)")</h6>
                                        <span class="badge bg-info">@daySlots.Count —Å–ª–æ—Ç–æ–≤</span>
                                    </div>
                                    <div class="row g-2">
                                        @foreach (var slot in daySlots)
                                        {
                                            <div class="col-md-3 col-sm-4 col-6">
                                                <div class="slot-item p-2 border rounded text-center @GetSlotClass(slot)">
                                                    <div class="small fw-bold">@slot.StartTime.ToString(@"hh\:mm")</div>
                                                    <div class="small">@GetSlotStatus(slot)</div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        }
                    </div>
                }
                else
                {
                    <div class="text-center text-muted py-4">
                        <div style="font-size: 48px;">‚è∞</div>
                        <h5 class="mt-3">–°–ª–æ—Ç—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã</h5>
                        <p class="mb-0">–ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å —Å–ª–æ—Ç—ã", —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è -->
<div class="modal fade" id="addScheduleModal" tabindex="-1" aria-labelledby="addScheduleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addScheduleModalLabel">–î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="scheduleForm">
                    <div class="mb-3">
                        <label for="dayOfWeek" class="form-label">–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏</label>
                        <select class="form-select" id="dayOfWeek" name="dayOfWeek" required>
                            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å</option>
                            <option value="1">–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫</option>
                            <option value="2">–í—Ç–æ—Ä–Ω–∏–∫</option>
                            <option value="3">–°—Ä–µ–¥–∞</option>
                            <option value="4">–ß–µ—Ç–≤–µ—Ä–≥</option>
                            <option value="5">–ü—è—Ç–Ω–∏—Ü–∞</option>
                            <option value="6">–°—É–±–±–æ—Ç–∞</option>
                            <option value="0">–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ</option>
                        </select>
                    </div>
                    <div class="row g-3">
                        <div class="col-6">
                            <label for="startTime" class="form-label">–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞</label>
                            <input type="time" class="form-control" id="startTime" name="startTime" required>
                        </div>
                        <div class="col-6">
                            <label for="endTime" class="form-label">–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è</label>
                            <input type="time" class="form-control" id="endTime" name="endTime" required>
                        </div>
                    </div>
                    <div class="mt-3">
                        <button type="button" class="btn btn-primary" onclick="addSchedule()">–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<style>
.schedule-item {
    transition: all 0.2s ease;
}

.schedule-item:hover {
    background-color: #f8f9fa;
    border-color: #6b7cff !important;
}

.stat-card {
    transition: all 0.2s ease;
}

.stat-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.slot-item {
    transition: all 0.2s ease;
    min-height: 50px;
    display: flex;
    flex-direction: column;
    justify-content: center;
}

.slot-item:hover {
    transform: translateY(-1px);
}

.slot-available {
    background-color: #d1edff;
    border-color: #0d6efd;
}

.slot-booked {
    background-color: #f8d7da;
    border-color: #dc3545;
}

.slot-unavailable {
    background-color: #f8f9fa;
    border-color: #6c757d;
}

.day-slots {
    background-color: #f8f9fa;
}

.card {
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    border: none;
}

.card:hover {
    box-shadow: 0 4px 8px rgba(0,0,0,0.15);
}

.btn {
    border-radius: 8px;
}

.form-control, .form-select {
    border-radius: 8px;
    border: 1px solid #dee2e6;
}

.form-control:focus, .form-select:focus {
    border-color: #6b7cff;
    box-shadow: 0 0 0 0.2rem rgba(107, 124, 255, 0.25);
}
</style>

<script>
function addSchedule() {
    const form = document.getElementById('scheduleForm');
    const formData = new FormData(form);
    
    const data = {
        dayOfWeek: parseInt(formData.get('dayOfWeek')),
        startTime: formData.get('startTime'),
        endTime: formData.get('endTime')
    };
    
    fetch('/psychologist/schedule/add', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(data)
    })
    .then(response => response.json())
    .then(result => {
        if (result.success) {
            alert(result.message);
            location.reload();
        } else {
            alert('–û—à–∏–±–∫–∞: ' + result.message);
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
    });
}

function removeSchedule(scheduleId) {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?')) {
        fetch('/psychologist/schedule/remove', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ scheduleId: scheduleId })
        })
        .then(response => response.json())
        .then(result => {
            if (result.success) {
                alert(result.message);
                location.reload();
            } else {
                alert('–û—à–∏–±–∫–∞: ' + result.message);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
        });
    }
}

function generateSlots() {
    if (confirm('–°–æ–∑–¥–∞—Ç—å —Å–ª–æ—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 2 –Ω–µ–¥–µ–ª–∏? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
        fetch('/psychologist/schedule/generate-slots', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            }
        })
        .then(response => response.json())
        .then(result => {
            if (result.success) {
                alert(result.message);
                location.reload();
            } else {
                alert('–û—à–∏–±–∫–∞: ' + result.message);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ª–æ—Ç–æ–≤');
        });
    }
}
</script>

@functions {
    string GetDayName(DayOfWeek dayOfWeek)
    {
        return dayOfWeek switch
        {
            DayOfWeek.Monday => "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
            DayOfWeek.Tuesday => "–í—Ç–æ—Ä–Ω–∏–∫",
            DayOfWeek.Wednesday => "–°—Ä–µ–¥–∞",
            DayOfWeek.Thursday => "–ß–µ—Ç–≤–µ—Ä–≥",
            DayOfWeek.Friday => "–ü—è—Ç–Ω–∏—Ü–∞",
            DayOfWeek.Saturday => "–°—É–±–±–æ—Ç–∞",
            DayOfWeek.Sunday => "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
            _ => dayOfWeek.ToString()
        };
    }

    string GetSlotClass(Sofia.Web.Models.PsychologistTimeSlot slot)
    {
        if (slot.IsBooked)
            return "slot-booked";
        if (!slot.IsAvailable)
            return "slot-unavailable";
        return "slot-available";
    }

    string GetSlotStatus(Sofia.Web.Models.PsychologistTimeSlot slot)
    {
        if (slot.IsBooked)
            return "–ó–∞–Ω—è—Ç–æ";
        if (!slot.IsAvailable)
            return "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ";
        return "–°–≤–æ–±–æ–¥–Ω–æ";
    }
}

