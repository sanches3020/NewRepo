@{
    ViewData["Title"] = "–î–∞—à–±–æ—Ä–¥ –ø—Å–∏—Ö–æ–ª–æ–≥–∞";
    var psychologist = ViewBag.Psychologist as Sofia.Web.Models.Psychologist;
    var appointments = ViewBag.Appointments as List<Sofia.Web.Models.PsychologistAppointment>;
    var clientData = ViewBag.ClientData as List<Sofia.Web.Controllers.ClientDataViewModel>;
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2>üë®‚Äç‚öïÔ∏è –î–∞—à–±–æ—Ä–¥ –ø—Å–∏—Ö–æ–ª–æ–≥–∞</h2>
    <div class="d-flex gap-2">
        <a href="/psychologist/schedule" class="btn btn-outline-primary btn-sm">üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ</a>
        <a href="/psychologist/clients" class="btn btn-outline-info btn-sm">üë• –ö–ª–∏–µ–Ω—Ç—ã</a>
    </div>
</div>

<div class="row g-4">
    <!-- Stats Cards -->
    <div class="col-12">
        <div class="row g-3 mb-4">
            <div class="col-md-3">
                <div class="card text-center h-100">
                    <div class="card-body">
                        <div class="h3 text-primary mb-2">@appointments?.Count</div>
                        <div class="text-muted">–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π</div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center h-100">
                    <div class="card-body">
                        <div class="h3 text-success mb-2">@appointments?.Count(a => a.Status == Sofia.Web.Models.AppointmentStatus.Confirmed)</div>
                        <div class="text-muted">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö</div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center h-100">
                    <div class="card-body">
                        <div class="h3 text-info mb-2">@appointments?.Count(a => a.Status == Sofia.Web.Models.AppointmentStatus.Completed)</div>
                        <div class="text-muted">–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö</div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center h-100">
                    <div class="card-body">
                        <div class="h3 text-warning mb-2">@appointments?.Count(a => a.AppointmentDate.Date == DateTime.Today)</div>
                        <div class="text-muted">–°–µ–≥–æ–¥–Ω—è</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Today's Appointments -->
    <div class="col-lg-8">
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="mb-0">üìÖ –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∑–∞–ø–∏—Å–∏</h5>
            </div>
            <div class="card-body">
                @{
                    var todayAppointments = appointments?.Where(a => a.AppointmentDate.Date == DateTime.Today).OrderBy(a => a.AppointmentDate).ToList();
                }
                @if (todayAppointments?.Any() == true)
                {
                    @foreach (var appointment in todayAppointments)
                    {
                        <div class="appointment-item d-flex align-items-center mb-3 p-3 border rounded">
                            <div class="appointment-time me-3">
                                <div class="time-badge">@appointment.AppointmentDate.ToString("HH:mm")</div>
                            </div>
                            <div class="appointment-info flex-grow-1">
                                <h6 class="mb-1">@appointment.User?.Username</h6>
                                @if (!string.IsNullOrEmpty(appointment.Notes))
                                {
                                    <p class="small text-muted mb-1">@appointment.Notes</p>
                                }
                                <div class="appointment-status">
                                    <span class="badge @GetStatusBadgeClass(appointment.Status)">@GetStatusName(appointment.Status)</span>
                                </div>
                            </div>
                            <div class="appointment-actions">
                                <div class="dropdown">
                                    <button class="btn btn-sm btn-outline-secondary" type="button" data-bs-toggle="dropdown">
                                        ‚ãÆ
                                    </button>
                                    <ul class="dropdown-menu">
                                        <li><a class="dropdown-item" href="#" onclick="updateStatus(@appointment.Id, 'Confirmed')">‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</a></li>
                                        <li><a class="dropdown-item" href="#" onclick="updateStatus(@appointment.Id, 'Completed')">‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å</a></li>
                                        <li><a class="dropdown-item" href="#" onclick="updateStatus(@appointment.Id, 'Cancelled')">‚ùå –û—Ç–º–µ–Ω–∏—Ç—å</a></li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="text-center text-muted py-4">
                        <div style="font-size: 48px;">üìÖ</div>
                        <h5 class="mt-3">–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</h5>
                        <p class="mb-0">–û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!</p>
                    </div>
                }
            </div>
        </div>

        <!-- Recent Appointments -->
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏</h5>
            </div>
            <div class="card-body">
                @if (appointments?.Any() == true)
                {
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>–î–∞—Ç–∞</th>
                                    <th>–í—Ä–µ–º—è</th>
                                    <th>–ö–ª–∏–µ–Ω—Ç</th>
                                    <th>–°—Ç–∞—Ç—É—Å</th>
                                    <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var appointment in appointments.Take(10))
                                {
                                    <tr>
                                        <td>@appointment.AppointmentDate.ToString("dd.MM.yyyy")</td>
                                        <td>@appointment.AppointmentDate.ToString("HH:mm")</td>
                                        <td>@appointment.User?.Username</td>
                                        <td>
                                            <span class="badge @GetStatusBadgeClass(appointment.Status)">@GetStatusName(appointment.Status)</span>
                                        </td>
                                        <td>
                                            <div class="dropdown">
                                                <button class="btn btn-sm btn-outline-secondary" type="button" data-bs-toggle="dropdown">
                                                    ‚ãÆ
                                                </button>
                                                <ul class="dropdown-menu">
                                                    <li><a class="dropdown-item" href="/psychologist/client/@appointment.UserId">üë§ –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞</a></li>
                                                    <li><a class="dropdown-item" href="#" onclick="updateStatus(@appointment.Id, 'Confirmed')">‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</a></li>
                                                    <li><a class="dropdown-item" href="#" onclick="updateStatus(@appointment.Id, 'Completed')">‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å</a></li>
                                                    <li><a class="dropdown-item" href="#" onclick="updateStatus(@appointment.Id, 'Cancelled')">‚ùå –û—Ç–º–µ–Ω–∏—Ç—å</a></li>
                                                </ul>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="text-center text-muted py-4">
                        <div style="font-size: 48px;">üìã</div>
                        <h5 class="mt-3">–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π</h5>
                        <p class="mb-0">–ö–ª–∏–µ–Ω—Ç—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–ª–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏</p>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Quick Actions -->
    <div class="col-lg-4">
        <div class="card mb-4">
            <div class="card-header">
                <h6 class="mb-0">‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h6>
            </div>
            <div class="card-body">
                <div class="d-grid gap-2">
                    <a href="/psychologist/schedule" class="btn btn-outline-primary btn-sm">üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º</a>
                    <a href="/psychologist/profile/@psychologist?.Id" class="btn btn-outline-success btn-sm">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</a>
                    <a href="/settings" class="btn btn-outline-secondary btn-sm">‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</a>
                </div>
            </div>
        </div>

        <!-- Profile Summary -->
        <div class="card mb-4">
            <div class="card-header">
                <h6 class="mb-0">üë®‚Äç‚öïÔ∏è –ü—Ä–æ—Ñ–∏–ª—å</h6>
            </div>
            <div class="card-body">
                <div class="profile-summary">
                    <div class="d-flex align-items-center mb-3">
                        <div class="avatar-circle-small me-3">
                            <div class="avatar-initial-small">@(psychologist?.Name?.FirstOrDefault().ToString().ToUpper() ?? "–ü")</div>
                        </div>
                        <div>
                            <h6 class="mb-0">@psychologist?.Name</h6>
                            <small class="text-muted">@psychologist?.Specialization</small>
                        </div>
                    </div>
                    <div class="profile-stats">
                        <div class="stat-item d-flex justify-content-between mb-2">
                            <span>–û–ø—ã—Ç:</span>
                            <span class="text-primary">@psychologist?.Experience</span>
                        </div>
                        <div class="stat-item d-flex justify-content-between mb-2">
                            <span>–¶–µ–Ω–∞ –∑–∞ —á–∞—Å:</span>
                            <span class="text-success">@psychologist?.PricePerHour?.ToString("C0")</span>
                        </div>
                        <div class="stat-item d-flex justify-content-between">
                            <span>–°—Ç–∞—Ç—É—Å:</span>
                            <span class="badge bg-success">–ê–∫—Ç–∏–≤–µ–Ω</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Notifications -->
        <div class="card">
            <div class="card-header">
                <h6 class="mb-0">üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h6>
            </div>
            <div class="card-body">
                <div class="notifications">
                    <div class="notification-item mb-2 p-2 border rounded">
                        <div class="d-flex align-items-center">
                            <span class="me-2">üìÖ</span>
                            <div class="flex-grow-1">
                                <div class="notification-text">–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞</div>
                                <small class="text-muted">2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥</small>
                            </div>
                        </div>
                    </div>
                    <div class="notification-item mb-2 p-2 border rounded">
                        <div class="d-flex align-items-center">
                            <span class="me-2">‚≠ê</span>
                            <div class="flex-grow-1">
                                <div class="notification-text">–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞</div>
                                <small class="text-muted">1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ -->
<div class="row g-4 mt-4">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">üë• –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤</h5>
            </div>
            <div class="card-body">
                @if (clientData?.Any() == true)
                {
                    <div class="row g-3">
                        @foreach (var client in clientData)
                        {
                            <div class="col-md-6 col-lg-4">
                                <div class="card h-100">
                                    <div class="card-header">
                                        <h6 class="mb-0">@client.User.Username</h6>
                                    </div>
                                    <div class="card-body">
                                        <div class="mb-2">
                                            <small class="text-muted">–ó–∞–º–µ—Ç–æ–∫: @client.Notes.Count</small>
                                        </div>
                                        <div class="mb-2">
                                            <small class="text-muted">–¶–µ–ª–µ–π: @client.Goals.Count</small>
                                        </div>
                                        <div class="mb-2">
                                            <small class="text-muted">–≠–º–æ—Ü–∏–π: @client.Emotions.Count</small>
                                        </div>
                                        <div class="mb-3">
                                            <small class="text-muted">–°–µ—Å—Å–∏–π: @client.RecentAppointments.Count</small>
                                        </div>
                                        
                                        @if (client.Notes.Any())
                                        {
                                            <div class="mb-2">
                                                <strong>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏:</strong>
                                                @foreach (var note in client.Notes.Take(2))
                                                {
                                                    <div class="small text-muted mb-1">
                                                        @(note.Content.Length > 50 ? note.Content.Substring(0, 50) + "..." : note.Content)
                                                    </div>
                                                }
                                            </div>
                                        }
                                        
                                        <a href="/psychologist/client/@client.User.Id" class="btn btn-outline-primary btn-sm">
                                            –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                                        </a>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <p class="text-muted text-center">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤.</p>
                }
            </div>
        </div>
    </div>
</div>

<style>
.appointment-item {
    transition: all 0.2s ease;
}

.appointment-item:hover {
    background-color: #f8f9fa;
    border-color: #6b7cff !important;
}

.time-badge {
    background: linear-gradient(135deg, #6b7cff 0%, #9c88ff 100%);
    color: white;
    padding: 8px 12px;
    border-radius: 6px;
    font-weight: bold;
    font-size: 14px;
    min-width: 60px;
    text-align: center;
}

.avatar-circle-small {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: linear-gradient(135deg, #6b7cff 0%, #9c88ff 100%);
    display: flex;
    align-items: center;
    justify-content: center;
}

.avatar-initial-small {
    font-size: 16px;
    font-weight: bold;
    color: white;
}

.profile-stats .stat-item {
    padding: 5px 0;
}

.notification-item {
    transition: all 0.2s ease;
}

.notification-item:hover {
    background-color: #f8f9fa;
    border-color: #6b7cff !important;
}

.card {
    transition: transform 0.2s ease;
}

.card:hover {
    transform: translateY(-2px);
}
</style>

<script>
function updateStatus(appointmentId, status) {
    fetch('/psychologist/update-status', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            appointmentId: appointmentId,
            status: status
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showToast('–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω', 'success');
            setTimeout(() => location.reload(), 1000);
        } else {
            showToast('–û—à–∏–±–∫–∞: ' + data.message, 'error');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showToast('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', 'error');
    });
}

function viewClientData(userId) {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –ø–µ—Ä–µ—Ö–æ–¥ –∫ –¥–∞–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞
    showToast('–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'info');
}

function showToast(message, type) {
    const toast = document.createElement('div');
    toast.className = 'toast-notification';
    toast.textContent = message;
    
    const colors = {
        success: '#10b981',
        error: '#ef4444',
        info: '#3b82f6',
        warning: '#f59e0b'
    };
    
    toast.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${colors[type]};
        color: white;
        padding: 12px 20px;
        border-radius: 6px;
        z-index: 1000;
        animation: slideIn 0.3s ease;
    `;
    
    document.body.appendChild(toast);
    
    setTimeout(() => {
        toast.remove();
    }, 3000);
}
</script>

@functions {
    string GetStatusBadgeClass(Sofia.Web.Models.AppointmentStatus status)
    {
        return status switch
        {
            Sofia.Web.Models.AppointmentStatus.Scheduled => "bg-primary",
            Sofia.Web.Models.AppointmentStatus.Confirmed => "bg-success",
            Sofia.Web.Models.AppointmentStatus.Completed => "bg-info",
            Sofia.Web.Models.AppointmentStatus.Cancelled => "bg-danger",
            Sofia.Web.Models.AppointmentStatus.NoShow => "bg-warning",
            _ => "bg-secondary"
        };
    }
    
    string GetStatusName(Sofia.Web.Models.AppointmentStatus status)
    {
        return status switch
        {
            Sofia.Web.Models.AppointmentStatus.Scheduled => "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ",
            Sofia.Web.Models.AppointmentStatus.Confirmed => "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ",
            Sofia.Web.Models.AppointmentStatus.Completed => "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
            Sofia.Web.Models.AppointmentStatus.Cancelled => "–û—Ç–º–µ–Ω–µ–Ω–æ",
            Sofia.Web.Models.AppointmentStatus.NoShow => "–ù–µ —è–≤–∏–ª—Å—è",
            _ => status.ToString()
        };
    }
}