@{
    ViewData["Title"] = "–ü–∞–Ω–µ–ª—å –ø—Å–∏—Ö–æ–ª–æ–≥–∞";
    var psychologist = ViewBag.Psychologist as Sofia.Web.Models.Psychologist;
    var appointments = ViewBag.Appointments as List<Sofia.Web.Models.PsychologistAppointment>;
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2>üë®‚Äç‚öïÔ∏è –ü–∞–Ω–µ–ª—å –ø—Å–∏—Ö–æ–ª–æ–≥–∞</h2>
    <div class="d-flex gap-2">
        <a href="/psychologist/profile/@psychologist.Id" class="btn btn-outline-primary btn-sm">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</a>
    </div>
</div>

<!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
<div class="row mb-4">
    <div class="col-md-3">
        <div class="card text-center">
            <div class="card-body">
                <h5 class="card-title text-primary">@appointments.Count</h5>
                <p class="card-text">–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-center">
            <div class="card-body">
                <h5 class="card-title text-success">@appointments.Count(a => a.Status == Sofia.Web.Models.AppointmentStatus.Confirmed)</h5>
                <p class="card-text">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-center">
            <div class="card-body">
                <h5 class="card-title text-warning">@appointments.Count(a => a.Status == Sofia.Web.Models.AppointmentStatus.Scheduled)</h5>
                <p class="card-text">–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-center">
            <div class="card-body">
                <h5 class="card-title text-info">@appointments.Count(a => a.Status == Sofia.Web.Models.AppointmentStatus.Completed)</h5>
                <p class="card-text">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</p>
            </div>
        </div>
    </div>
</div>

<!-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Å–∏—Ö–æ–ª–æ–≥–µ -->
<div class="card mb-4">
    <div class="card-header">
        <h5 class="mb-0">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ</h5>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-6">
                <p><strong>–ò–º—è:</strong> @psychologist.Name</p>
                <p><strong>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</strong> @psychologist.Specialization</p>
                <p><strong>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</strong> @psychologist.Education</p>
            </div>
            <div class="col-md-6">
                <p><strong>–û–ø—ã—Ç:</strong> @psychologist.Experience</p>
                <p><strong>–Ø–∑—ã–∫–∏:</strong> @psychologist.Languages</p>
                <p><strong>–ú–µ—Ç–æ–¥—ã:</strong> @psychologist.Methods</p>
            </div>
        </div>
    </div>
</div>

<!-- –ó–∞–ø–∏—Å–∏ -->
<div class="card">
    <div class="card-header">
        <h5 class="mb-0">–ó–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏</h5>
    </div>
    <div class="card-body">
        @if (appointments.Any())
        {
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è</th>
                            <th>–ö–ª–∏–µ–Ω—Ç</th>
                            <th>–°—Ç–∞—Ç—É—Å</th>
                            <th>–ó–∞–º–µ—Ç–∫–∏</th>
                            <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var appointment in appointments)
                        {
                            <tr>
                                <td>@appointment.AppointmentDate.ToString("dd.MM.yyyy HH:mm")</td>
                                <td>@(appointment.User?.Username ?? "–ù–µ —É–∫–∞–∑–∞–Ω")</td>
                                <td>
                                    <span class="badge @GetStatusBadgeClass(appointment.Status)">
                                        @GetStatusText(appointment.Status)
                                    </span>
                                </td>
                                <td>@(appointment.Notes ?? "-")</td>
                                <td>
                                    <div class="btn-group btn-group-sm">
                                        @if (appointment.Status == Sofia.Web.Models.AppointmentStatus.Scheduled)
                                        {
                                            <button class="btn btn-outline-success btn-sm" onclick="updateStatus(@appointment.Id, 'Confirmed')">
                                                –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
                                            </button>
                                        }
                                        @if (appointment.Status == Sofia.Web.Models.AppointmentStatus.Confirmed)
                                        {
                                            <button class="btn btn-outline-primary btn-sm" onclick="updateStatus(@appointment.Id, 'Completed')">
                                                –ó–∞–≤–µ—Ä—à–∏—Ç—å
                                            </button>
                                        }
                                        <button class="btn btn-outline-danger btn-sm" onclick="updateStatus(@appointment.Id, 'Cancelled')">
                                            –û—Ç–º–µ–Ω–∏—Ç—å
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="text-center text-muted py-4">
                <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏</p>
            </div>
        }
    </div>
</div>

<script>
function updateStatus(appointmentId, newStatus) {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏?')) {
        fetch('/psychologist/update-status', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                appointmentId: appointmentId,
                status: newStatus
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                location.reload();
            } else {
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: ' + data.message);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞');
        });
    }
}
</script>

@functions {
    string GetStatusBadgeClass(Sofia.Web.Models.AppointmentStatus status)
    {
        return status switch
        {
            Sofia.Web.Models.AppointmentStatus.Scheduled => "bg-warning",
            Sofia.Web.Models.AppointmentStatus.Confirmed => "bg-info",
            Sofia.Web.Models.AppointmentStatus.Completed => "bg-success",
            Sofia.Web.Models.AppointmentStatus.Cancelled => "bg-danger",
            Sofia.Web.Models.AppointmentStatus.NoShow => "bg-secondary",
            _ => "bg-secondary"
        };
    }
    
    string GetStatusText(Sofia.Web.Models.AppointmentStatus status)
    {
        return status switch
        {
            Sofia.Web.Models.AppointmentStatus.Scheduled => "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ",
            Sofia.Web.Models.AppointmentStatus.Confirmed => "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ",
            Sofia.Web.Models.AppointmentStatus.Completed => "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
            Sofia.Web.Models.AppointmentStatus.Cancelled => "–û—Ç–º–µ–Ω–µ–Ω–æ",
            Sofia.Web.Models.AppointmentStatus.NoShow => "–ù–µ —è–≤–∏–ª—Å—è",
            _ => status.ToString()
        };
    }
}
