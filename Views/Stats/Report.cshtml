@{
    ViewData["Title"] = "–û—Ç—á–µ—Ç";
    var reportData = ViewBag.ReportData as dynamic;
    var format = ViewBag.Format as string;
}

@if (format == "pdf")
{
    <style>
        body { font-family: Arial, sans-serif; }
        .report-header { text-align: center; margin-bottom: 30px; }
        .report-section { margin-bottom: 25px; }
        .chart-placeholder { background: #f8f9fa; padding: 20px; text-align: center; border: 1px solid #dee2e6; }
        .no-print { display: none; }
    </style>
}

<div class="d-flex justify-content-between align-items-center mb-4 no-print">
    <h2>üìä –û—Ç—á–µ—Ç –ø–æ –¥–∞–Ω–Ω—ã–º</h2>
    <div class="d-flex gap-2">
        <a href="/stats" class="btn btn-outline-secondary">‚Üê –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</a>
        <button class="btn btn-outline-primary" onclick="window.print()">üñ®Ô∏è –ü–µ—á–∞—Ç—å</button>
        <a href="/stats/report?days=@reportData.Period.Days&format=json" class="btn btn-outline-success">üì• JSON</a>
    </div>
</div>

<!-- Report Header -->
<div class="report-header">
    <h1>Sofia - –û—Ç—á–µ—Ç –æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–∏</h1>
    <p class="text-muted">–ü–µ—Ä–∏–æ–¥: @reportData.Period.Start.ToString("dd.MM.yyyy") - @reportData.Period.End.ToString("dd.MM.yyyy") (@reportData.Period.Days –¥–Ω–µ–π)</p>
    <p class="text-muted">–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: @reportData.GeneratedAt.ToString("dd.MM.yyyy HH:mm")</p>
</div>

<!-- Summary Cards -->
<div class="row g-3 mb-4">
    <div class="col-md-3">
        <div class="card text-center">
            <div class="card-body">
                <div class="h3 text-primary">@reportData.Summary.TotalNotes</div>
                <div class="text-muted">–ó–∞–º–µ—Ç–æ–∫</div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-center">
            <div class="card-body">
                <div class="h3 text-success">@reportData.Summary.CompletedGoals</div>
                <div class="text-muted">–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π</div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-center">
            <div class="card-body">
                <div class="h3 text-info">@reportData.Summary.ActiveGoals</div>
                <div class="text-muted">–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π</div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-center">
            <div class="card-body">
                <div class="h3 text-warning">@reportData.Summary.AverageMood.ToString("F1")</div>
                <div class="text-muted">–°—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ</div>
            </div>
        </div>
    </div>
</div>

<!-- Emotion Analysis -->
<div class="card mb-4">
    <div class="card-header">
        <h5 class="mb-0">üé≠ –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π</h5>
    </div>
    <div class="card-body">
        @if (reportData.EmotionStats.Count > 0)
        {
            <div class="row">
                <div class="col-md-8">
                    <div class="emotion-chart">
                        @foreach (var emotion in reportData.EmotionStats)
                        {
                            var percentage = (emotion.Count / (double)reportData.Summary.TotalNotes) * 100;
                            <div class="emotion-bar mb-3">
                                <div class="d-flex justify-content-between align-items-center mb-1">
                                    <div class="d-flex align-items-center">
                                        <div class="emotion-legend-color me-2" style="background-color: @GetEmotionColor(emotion.Emotion)"></div>
                                        <span class="small">@GetEmotionEmoji(emotion.Emotion) @GetEmotionName(emotion.Emotion)</span>
                                    </div>
                                    <span class="small text-muted">@emotion.Count (@percentage.ToString("F1"))%</span>
                                </div>
                                <div class="progress" style="height: 8px;">
                                    <div class="progress-bar" role="progressbar" style="width: @percentage%; background-color: @GetEmotionColor(emotion.Emotion);" aria-valuenow="@percentage" aria-valuemin="0" aria-valuemax="100"></div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="chart-placeholder">
                        <h6>üìà –ì—Ä–∞—Ñ–∏–∫ —ç–º–æ—Ü–∏–π</h6>
                        <p class="text-muted">–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥</p>
                        @if (reportData.Summary.MostFrequentEmotion != null)
                        {
                            <div class="alert alert-info">
                                <strong>–°–∞–º–∞—è —á–∞—Å—Ç–∞—è —ç–º–æ—Ü–∏—è:</strong><br>
                                @GetEmotionEmoji(reportData.Summary.MostFrequentEmotion) @GetEmotionName(reportData.Summary.MostFrequentEmotion)
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="text-center text-muted py-4">
                <div style="font-size: 48px;">üìä</div>
                <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± —ç–º–æ—Ü–∏—è—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥</p>
            </div>
        }
    </div>
</div>

<!-- Activity Analysis -->
@if (reportData.ActivityStats.Count > 0)
{
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0">üèÉ –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</h5>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <h6>–¢–æ–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π:</h6>
                    <div class="activity-list">
                        @foreach (var activity in reportData.ActivityStats.Take(5))
                        {
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <span>üèÉ @activity.Activity</span>
                                <span class="badge bg-primary">@activity.Count</span>
                            </div>
                        }
                    </div>
                </div>
                <div class="col-md-6">
                    @if (reportData.Summary.MostFrequentActivity != null)
                    {
                        <div class="alert alert-success">
                            <h6 class="alert-heading">‚≠ê –°–∞–º–∞—è —á–∞—Å—Ç–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</h6>
                            <p class="mb-0">@reportData.Summary.MostFrequentActivity</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

<!-- Goals Analysis -->
@if (reportData.Goals.Count > 0)
{
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0">üéØ –ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–π</h5>
        </div>
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-3">
                    <div class="text-center">
                        <div class="h4 text-primary">@reportData.GoalStats.Total</div>
                        <div class="text-muted">–í—Å–µ–≥–æ —Ü–µ–ª–µ–π</div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="text-center">
                        <div class="h4 text-success">@reportData.GoalStats.Completed</div>
                        <div class="text-muted">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="text-center">
                        <div class="h4 text-info">@reportData.GoalStats.Active</div>
                        <div class="text-muted">–ê–∫—Ç–∏–≤–Ω—ã—Ö</div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="text-center">
                        <div class="h4 text-warning">@reportData.GoalStats.AverageProgress.ToString("F0")%</div>
                        <div class="text-muted">–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å</div>
                    </div>
                </div>
            </div>
            
            @if (reportData.Goals.Count > 0)
            {
                <div class="mt-4">
                    <h6>–ê–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏:</h6>
                    <div class="row g-2">
                        @foreach (var goal in ((IEnumerable<dynamic>)reportData.Goals).Where(g => g.Status == Sofia.Web.Models.GoalStatus.Active).Take(6))
                        {
                            <div class="col-md-6">
                                <div class="goal-item p-3 border rounded">
                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <h6 class="mb-0">@goal.Title</h6>
                                        <span class="badge bg-primary">@goal.Progress%</span>
                                    </div>
                                    <div class="progress" style="height: 4px;">
                                        <div class="progress-bar bg-primary" style="width: @goal.Progress%"></div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
}

<!-- Mood Trends -->
@if (reportData.MoodTrends.Count > 0)
{
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0">üìà –¢—Ä–µ–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è</h5>
        </div>
        <div class="card-body">
            <div class="chart-placeholder">
                <h6>üìä –ì—Ä–∞—Ñ–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ –¥–Ω—è–º</h6>
                <p class="text-muted">–î–∏–Ω–∞–º–∏–∫–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥</p>
                <div class="row g-2">
                    @foreach (var trend in reportData.MoodTrends.Take(7))
                    {
                        <div class="col">
                            <div class="text-center">
                                <div class="small">@trend.Date.ToString("dd.MM")</div>
                                <div class="h6">@GetEmotionEmoji((Sofia.Web.Models.EmotionType)(int)trend.AverageMood)</div>
                                <div class="small text-muted">@trend.Count –∑–∞–ø–∏—Å–µ–π</div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

<!-- Recent Notes -->
@if (reportData.Notes.Count > 0)
{
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0">üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏</h5>
        </div>
        <div class="card-body">
            <div class="row g-3">
                @foreach (var note in reportData.Notes.Take(12))
                {
                    <div class="col-md-6 col-lg-4">
                        <div class="note-item p-3 border rounded">
                            <div class="d-flex align-items-center mb-2">
                                <span class="me-2">@GetEmotionEmoji(note.Emotion)</span>
                                <span class="badge bg-secondary">@GetEmotionName(note.Emotion)</span>
                                <small class="text-muted ms-auto">@note.CreatedAt.ToString("dd.MM")</small>
                            </div>
                            <p class="small mb-0">@(note.Content.Length > 100 ? note.Content.Substring(0, 100) + "..." : note.Content)</p>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

<!-- Tags Analysis -->
@if (reportData.TagStats.Count > 0)
{
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0">üè∑Ô∏è –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–≥–∏</h5>
        </div>
        <div class="card-body">
            <div class="tag-cloud">
                @foreach (var tag in reportData.TagStats.Take(20))
                {
                    var size = Math.Max(12, Math.Min(24, 12 + (tag.Count * 2)));
                    <span class="badge bg-light text-dark me-2 mb-2" style="font-size: @(size)px;">
                        #@tag.Tag (@tag.Count)
                    </span>
                }
            </div>
        </div>
    </div>
}

<!-- Footer -->
<div class="text-center text-muted py-4">
    <p>–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π Sofia - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —ç–º–æ—Ü–∏–π –∏ —Ü–µ–ª–µ–π</p>
    <p class="small">–í–µ—Ä—Å–∏—è @reportData.Version ‚Ä¢ @reportData.GeneratedAt.ToString("dd.MM.yyyy HH:mm")</p>
</div>

<style>
.emotion-legend-color {
    width: 16px;
    height: 16px;
    border-radius: 4px;
    border: 1px solid rgba(0,0,0,0.1);
    display: inline-block;
    vertical-align: middle;
}

.tag-cloud {
    line-height: 2;
}

.goal-item, .note-item {
    transition: all 0.2s ease;
}

.goal-item:hover, .note-item:hover {
    background: #f8f9fa;
    border-color: #6b7cff !important;
}

.chart-placeholder {
    background: #f8f9fa;
    padding: 20px;
    text-align: center;
    border: 1px solid #dee2e6;
    border-radius: 8px;
}

@@media print {
    .no-print { display: none !important; }
    .card { break-inside: avoid; }
    .page-break { page-break-before: always; }
}
</style>

@functions {
    string GetEmotionColor(Sofia.Web.Models.EmotionType emotion)
    {
        return emotion switch
        {
            Sofia.Web.Models.EmotionType.VerySad => "#fee2e2",
            Sofia.Web.Models.EmotionType.Sad => "#fecaca",
            Sofia.Web.Models.EmotionType.Neutral => "#f3f4f6",
            Sofia.Web.Models.EmotionType.Happy => "#dcfce7",
            Sofia.Web.Models.EmotionType.VeryHappy => "#bbf7d0",
            Sofia.Web.Models.EmotionType.Anxious => "#fef3c7",
            Sofia.Web.Models.EmotionType.Calm => "#dbeafe",
            Sofia.Web.Models.EmotionType.Excited => "#fde68a",
            Sofia.Web.Models.EmotionType.Frustrated => "#fed7aa",
            Sofia.Web.Models.EmotionType.Grateful => "#e0e7ff",
            _ => "#f3f4f6"
        };
    }
    
    string GetEmotionEmoji(Sofia.Web.Models.EmotionType emotion)
    {
        return emotion switch
        {
            Sofia.Web.Models.EmotionType.VerySad => "üò¢",
            Sofia.Web.Models.EmotionType.Sad => "üòî",
            Sofia.Web.Models.EmotionType.Neutral => "üòê",
            Sofia.Web.Models.EmotionType.Happy => "üòä",
            Sofia.Web.Models.EmotionType.VeryHappy => "üòÑ",
            Sofia.Web.Models.EmotionType.Anxious => "üò∞",
            Sofia.Web.Models.EmotionType.Calm => "üòå",
            Sofia.Web.Models.EmotionType.Excited => "ü§©",
            Sofia.Web.Models.EmotionType.Frustrated => "üò§",
            Sofia.Web.Models.EmotionType.Grateful => "üôè",
            _ => "üòê"
        };
    }
    
    string GetEmotionName(Sofia.Web.Models.EmotionType emotion)
    {
        return emotion switch
        {
            Sofia.Web.Models.EmotionType.VerySad => "–û—á–µ–Ω—å –≥—Ä—É—Å—Ç–Ω–æ",
            Sofia.Web.Models.EmotionType.Sad => "–ì—Ä—É—Å—Ç–Ω–æ",
            Sofia.Web.Models.EmotionType.Neutral => "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ",
            Sofia.Web.Models.EmotionType.Happy => "–†–∞–¥–æ—Å—Ç–Ω–æ",
            Sofia.Web.Models.EmotionType.VeryHappy => "–û—á–µ–Ω—å —Ä–∞–¥–æ—Å—Ç–Ω–æ",
            Sofia.Web.Models.EmotionType.Anxious => "–¢—Ä–µ–≤–æ–∂–Ω–æ",
            Sofia.Web.Models.EmotionType.Calm => "–°–ø–æ–∫–æ–π–Ω–æ",
            Sofia.Web.Models.EmotionType.Excited => "–í–∑–≤–æ–ª–Ω–æ–≤–∞–Ω–Ω–æ",
            Sofia.Web.Models.EmotionType.Frustrated => "–†–∞–∑–¥—Ä–∞–∂—ë–Ω–Ω–æ",
            Sofia.Web.Models.EmotionType.Grateful => "–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ",
            _ => emotion.ToString()
        };
    }
}
