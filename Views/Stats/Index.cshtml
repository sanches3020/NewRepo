@{
    ViewData["Title"] = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞";
    var daysBack = ViewBag.DaysBack as int? ?? 30;
    var totalNotes = ViewBag.TotalNotes as int? ?? 0;
    var recentNotes = ViewBag.RecentNotes as int? ?? 0;
    var totalGoals = ViewBag.TotalGoals as int? ?? 0;
    var activeGoals = ViewBag.ActiveGoals as int? ?? 0;
    var completedGoals = ViewBag.CompletedGoals as int? ?? 0;
    var emotionStats = ViewBag.EmotionStats as List<dynamic>;
    var weeklyStats = ViewBag.WeeklyStats as List<dynamic>;
    var hourlyStats = ViewBag.HourlyStats as List<dynamic>;
    var tagStats = ViewBag.TagStats as List<dynamic>;
    var activityStats = ViewBag.ActivityStats as List<dynamic>;
    var practiceStats = ViewBag.PracticeStats as List<Sofia.Web.Models.Practice>;
    var moodTrends = ViewBag.MoodTrends as List<dynamic>;
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</h2>
    <div class="d-flex gap-2">
        <div class="btn-group" role="group">
            <a href="/stats?days=7" class="btn btn-outline-primary btn-sm @(daysBack == 7 ? "active" : "")">7 –¥–Ω–µ–π</a>
            <a href="/stats?days=30" class="btn btn-outline-primary btn-sm @(daysBack == 30 ? "active" : "")">30 –¥–Ω–µ–π</a>
            <a href="/stats?days=90" class="btn btn-outline-primary btn-sm @(daysBack == 90 ? "active" : "")">90 –¥–Ω–µ–π</a>
        </div>
        <div class="btn-group" role="group">
            <button class="btn btn-outline-success btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown">
                üìä –û—Ç—á–µ—Ç—ã
            </button>
            <ul class="dropdown-menu">
                <li><a class="dropdown-item" href="/stats/report?days=@daysBack&format=html">üìÑ HTML –æ—Ç—á–µ—Ç</a></li>
                <li><a class="dropdown-item" href="/stats/report?days=@daysBack&format=json">üì• JSON –¥–∞–Ω–Ω—ã–µ</a></li>
                <li><a class="dropdown-item" href="/stats/export?days=@daysBack">üìä CSV —ç–∫—Å–ø–æ—Ä—Ç</a></li>
            </ul>
        </div>
        <a href="/stats/insights" class="btn btn-outline-info btn-sm">üí° –ò–Ω—Å–∞–π—Ç—ã</a>
    </div>
</div>

<!-- Overview Cards -->
<div class="row g-3 mb-4">
    <div class="col-md-3">
        <div class="card text-center h-100">
            <div class="card-body">
                <div class="h2 text-primary mb-2">@totalNotes</div>
                <div class="text-muted">–í—Å–µ–≥–æ –∑–∞–º–µ—Ç–æ–∫</div>
                <small class="text-success">+@recentNotes –∑–∞ @daysBack –¥–Ω–µ–π</small>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-center h-100">
            <div class="card-body">
                <div class="h2 text-success mb-2">@activeGoals</div>
                <div class="text-muted">–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π</div>
                <small class="text-info">@completedGoals –∑–∞–≤–µ—Ä—à–µ–Ω–æ</small>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-center h-100">
            <div class="card-body">
                <div class="h2 text-info mb-2">@(practiceStats?.Count ?? 0)</div>
                <div class="text-muted">–ü—Ä–∞–∫—Ç–∏–∫ –º–µ–¥–∏—Ç–∞—Ü–∏–∏</div>
                <small class="text-muted">–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è</small>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-center h-100">
            <div class="card-body">
                <div class="h2 text-warning mb-2">@(recentNotes / (double)daysBack):F1</div>
                <div class="text-muted">–ó–∞–º–µ—Ç–æ–∫ –≤ –¥–µ–Ω—å</div>
                <small class="text-muted">–°—Ä–µ–¥–Ω–µ–µ –∑–∞ –ø–µ—Ä–∏–æ–¥</small>
            </div>
        </div>
    </div>
</div>

<div class="row g-4">
    <!-- Emotion Distribution -->
    <div class="col-lg-6">
        <div class="card h-100">
            <div class="card-header">
                <h5 class="mb-0">üé≠ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–π</h5>
            </div>
            <div class="card-body">
                @if (emotionStats?.Any() == true)
                {
                    <canvas id="emotionChart" height="300"></canvas>
                }
                else
                {
                    <div class="text-center text-muted py-4">
                        <div style="font-size: 48px;">üìä</div>
                        <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± —ç–º–æ—Ü–∏—è—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥</p>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Mood Trends -->
    <div class="col-lg-6">
        <div class="card h-100">
            <div class="card-header">
                <h5 class="mb-0">üìà –¢—Ä–µ–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (7 –¥–Ω–µ–π)</h5>
            </div>
            <div class="card-body">
                @if (moodTrends?.Any() == true)
                {
                    <div class="timeline-container">
                        <div class="timeline-header">
                            <button class="btn btn-sm btn-outline-primary" onclick="switchTimelineView('chart')">üìä –ì—Ä–∞—Ñ–∏–∫</button>
                            <button class="btn btn-sm btn-outline-secondary active" onclick="switchTimelineView('timeline')">üìÖ –¢–∞–π–º–ª–∞–π–Ω</button>
                        </div>
                        <div id="timeline-view" class="timeline-view">
                            @foreach (var trend in moodTrends.OrderByDescending(t => t.date))
                            {
                                var emotionName = GetEmotionName((int)trend.averageMood);
                                var emotionIcon = GetEmotionIcon((int)trend.averageMood);
                                var date = DateTime.Parse(trend.date.ToString()).ToString("dd.MM");
                                string GetEmotionName(int value)
                                {
                                    var emotions = new[] { "–û—á–µ–Ω—å –≥—Ä—É—Å—Ç–Ω–æ", "–ì—Ä—É—Å—Ç–Ω–æ", "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ", "–†–∞–¥–æ—Å—Ç–Ω–æ", "–û—á–µ–Ω—å —Ä–∞–¥–æ—Å—Ç–Ω–æ", "–¢—Ä–µ–≤–æ–∂–Ω–æ", "–°–ø–æ–∫–æ–π–Ω–æ", "–í–∑–≤–æ–ª–Ω–æ–≤–∞–Ω–Ω–æ", "–†–∞–∑–¥—Ä–∞–∂—ë–Ω–Ω–æ", "–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ" };
                                    return value >= 0 && value < emotions.Length ? emotions[value] : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
                                }
                                string GetEmotionIcon(int value)
                                {
                                    var icons = new[] { "üò¢", "üòî", "üòê", "üòä", "üòÑ", "üò∞", "üòå", "ü§©", "üò§", "üôè" };
                                    return value >= 0 && value < icons.Length ? icons[value] : "üòê";
                                }
                                <div class="timeline-item">
                                    <div class="timeline-date">@date</div>
                                    <div class="timeline-content">
                                        <div class="timeline-emotion">
                                            <span class="emotion-icon">@emotionIcon</span>
                                            <span class="emotion-name">@emotionName</span>
                                        </div>
                                        <div class="timeline-stats">
                                            <small>@trend.count –∑–∞–º–µ—Ç–æ–∫</small>
                                        </div>
                                    </div>
                                    <div class="timeline-bar" style="width: @((int)trend.averageMood * 10)%"></div>
                                </div>
                            }
                        </div>
                        <canvas id="moodTrendChart" height="300" style="display: none;"></canvas>
                    </div>
                }
                else
                {
                    <div class="text-center text-muted py-4">
                        <div style="font-size: 48px;">üìà</div>
                        <p>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞</p>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Weekly Activity -->
    <div class="col-lg-6">
        <div class="card h-100">
            <div class="card-header">
                <h5 class="mb-0">üìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏</h5>
            </div>
            <div class="card-body">
                @if (weeklyStats?.Any() == true)
                {
                    <canvas id="weeklyChart" height="300"></canvas>
                }
                else
                {
                    <div class="text-center text-muted py-4">
                        <div style="font-size: 48px;">üìÖ</div>
                        <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏</p>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Hourly Activity -->
    <div class="col-lg-6">
        <div class="card h-100">
            <div class="card-header">
                <h5 class="mb-0">üïê –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º</h5>
            </div>
            <div class="card-body">
                @if (hourlyStats?.Any() == true)
                {
                    <canvas id="hourlyChart" height="300"></canvas>
                }
                else
                {
                    <div class="text-center text-muted py-4">
                        <div style="font-size: 48px;">üïê</div>
                        <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —á–∞—Å–∞–º</p>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Top Tags -->
    <div class="col-lg-6">
        <div class="card h-100">
            <div class="card-header">
                <h5 class="mb-0">üè∑Ô∏è –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–≥–∏</h5>
            </div>
            <div class="card-body">
                @if (tagStats?.Any() == true)
                {
                    <div class="tag-cloud">
                        @foreach (var tag in tagStats.Take(15))
                        {
                            var size = Math.Max(12, Math.Min(24, 12 + (tag.Count * 2)));
                            <span class="badge bg-light text-dark me-2 mb-2" style="font-size: @(size)px;">
                                #@tag.Tag (@tag.Count)
                            </span>
                        }
                    </div>
                }
                else
                {
                    <div class="text-center text-muted py-4">
                        <div style="font-size: 48px;">üè∑Ô∏è</div>
                        <p>–ù–µ—Ç —Ç–µ–≥–æ–≤ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥</p>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Top Activities -->
    <div class="col-lg-6">
        <div class="card h-100">
            <div class="card-header">
                <h5 class="mb-0">üèÉ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</h5>
            </div>
            <div class="card-body">
                @if (activityStats?.Any() == true)
                {
                    <div class="activity-list">
                        @foreach (var activity in activityStats.Take(10))
                        {
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <span>üèÉ @activity.Activity</span>
                                <span class="badge bg-primary">@activity.Count</span>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="text-center text-muted py-4">
                        <div style="font-size: 48px;">üèÉ</div>
                        <p>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Goals Progress -->
@if (activeGoals > 0)
{
    <div class="card mt-4">
        <div class="card-header">
            <h5 class="mb-0">üéØ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª—è–º</h5>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-4">
                    <div class="text-center">
                        <div class="h3 text-primary">@activeGoals</div>
                        <div class="text-muted">–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π</div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="text-center">
                        <div class="h3 text-success">@completedGoals</div>
                        <div class="text-muted">–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π</div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="text-center">
                        <div class="h3 text-info">@(totalGoals > 0 ? (completedGoals * 100 / totalGoals) : 0)%</div>
                        <div class="text-muted">–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Emotion Chart
    const emotionCtx = document.getElementById('emotionChart');
    if (emotionCtx) {
        const emotionData = @Html.Raw(Json.Serialize(emotionStats));
        
        new Chart(emotionCtx, {
            type: 'doughnut',
            data: {
                labels: emotionData.map(e => e.emotion),
                datasets: [{
                    data: emotionData.map(e => e.count),
                    backgroundColor: emotionData.map(e => getEmotionColor(e.emotion)),
                    borderWidth: 2,
                    borderColor: '#ffffff'
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'bottom',
                        labels: {
                            usePointStyle: true,
                            padding: 20
                        }
                    }
                }
            }
        });
    }

    // Mood Trend Chart
    const moodCtx = document.getElementById('moodTrendChart');
    if (moodCtx) {
        const moodData = @Html.Raw(Json.Serialize(moodTrends));
        
        new Chart(moodCtx, {
            type: 'line',
            data: {
                labels: moodData.map(m => new Date(m.date).toLocaleDateString('ru-RU')),
                datasets: [{
                    label: '–°—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ',
                    data: moodData.map(m => m.averageMood),
                    borderColor: '#6b7cff',
                    backgroundColor: 'rgba(107, 124, 255, 0.1)',
                    tension: 0.4,
                    fill: true
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        max: 10,
                        ticks: {
                            callback: function(value) {
                                return getEmotionName(value);
                            }
                        }
                    }
                },
                plugins: {
                    legend: {
                        display: false
                    }
                }
            }
        });
    }

    // Weekly Chart
    const weeklyCtx = document.getElementById('weeklyChart');
    if (weeklyCtx) {
        const weeklyData = @Html.Raw(Json.Serialize(weeklyStats));
        const daysOfWeek = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'];
        
        new Chart(weeklyCtx, {
            type: 'bar',
            data: {
                labels: daysOfWeek,
                datasets: [{
                    label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ—Ç–æ–∫',
                    data: daysOfWeek.map((_, index) => {
                        const dayData = weeklyData.find(w => w.dayOfWeek === index);
                        return dayData ? dayData.count : 0;
                    }),
                    backgroundColor: 'rgba(107, 124, 255, 0.8)',
                    borderColor: '#6b7cff',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                },
                plugins: {
                    legend: {
                        display: false
                    }
                }
            }
        });
    }

    // Hourly Chart
    const hourlyCtx = document.getElementById('hourlyChart');
    if (hourlyCtx) {
        const hourlyData = @Html.Raw(Json.Serialize(hourlyStats));
        
        new Chart(hourlyCtx, {
            type: 'bar',
            data: {
                labels: Array.from({length: 24}, (_, i) => i + ':00'),
                datasets: [{
                    label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ—Ç–æ–∫',
                    data: Array.from({length: 24}, (_, hour) => {
                        const hourData = hourlyData.find(h => h.hour === hour);
                        return hourData ? hourData.count : 0;
                    }),
                    backgroundColor: 'rgba(34, 197, 94, 0.8)',
                    borderColor: '#22c55e',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                },
                plugins: {
                    legend: {
                        display: false
                    }
                }
            }
        });
    }
});

function getEmotionColor(emotion) {
    const colors = {
        'VerySad': '#fee2e2',
        'Sad': '#fecaca',
        'Neutral': '#f3f4f6',
        'Happy': '#dcfce7',
        'VeryHappy': '#bbf7d0',
        'Anxious': '#fef3c7',
        'Calm': '#dbeafe',
        'Excited': '#fde68a',
        'Frustrated': '#fed7aa',
        'Grateful': '#e0e7ff'
    };
    return colors[emotion] || '#f3f4f6';
}

function getEmotionName(value) {
    const emotions = ['–û—á–µ–Ω—å –≥—Ä—É—Å—Ç–Ω–æ', '–ì—Ä—É—Å—Ç–Ω–æ', '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ', '–†–∞–¥–æ—Å—Ç–Ω–æ', '–û—á–µ–Ω—å —Ä–∞–¥–æ—Å—Ç–Ω–æ', '–¢—Ä–µ–≤–æ–∂–Ω–æ', '–°–ø–æ–∫–æ–π–Ω–æ', '–í–∑–≤–æ–ª–Ω–æ–≤–∞–Ω–Ω–æ', '–†–∞–∑–¥—Ä–∞–∂—ë–Ω–Ω–æ', '–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ'];
    return emotions[Math.round(value)] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

function getEmotionIcon(value) {
    const icons = ['üò¢', 'üòî', 'üòê', 'üòä', 'üòÑ', 'üò∞', 'üòå', 'ü§©', 'üò§', 'üôè'];
    return icons[Math.round(value)] || 'üòê';
}

function switchTimelineView(view) {
    const timelineView = document.getElementById('timeline-view');
    const chartView = document.getElementById('moodTrendChart');
    const chartBtn = document.querySelector('[onclick*="chart"]');
    const timelineBtn = document.querySelector('[onclick*="timeline"]');

    if (view === 'chart') {
        timelineView.style.display = 'none';
        chartView.style.display = 'block';
        chartBtn.classList.add('active');
        timelineBtn.classList.remove('active');
        // Initialize chart if not already done
        if (!chartView.chart) {
            initializeMoodChart();
        }
    } else {
        timelineView.style.display = 'block';
        chartView.style.display = 'none';
        timelineBtn.classList.add('active');
        chartBtn.classList.remove('active');
    }
}

function initializeMoodChart() {
    const moodCtx = document.getElementById('moodTrendChart');
    if (!moodCtx) return;

    const moodData = @Html.Raw(Json.Serialize(moodTrends));

    moodCtx.chart = new Chart(moodCtx, {
        type: 'line',
        data: {
            labels: moodData.map(m => new Date(m.date).toLocaleDateString('ru-RU')),
            datasets: [{
                label: '–°—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ',
                data: moodData.map(m => m.averageMood),
                borderColor: '#6b7cff',
                backgroundColor: 'rgba(107, 124, 255, 0.1)',
                tension: 0.4,
                fill: true
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true,
                    max: 10,
                    ticks: {
                        callback: function(value) {
                            return getEmotionName(value);
                        }
                    }
                }
            },
            plugins: {
                legend: {
                    display: false
                }
            }
        }
    });
}
</script>

<style>
.tag-cloud {
    line-height: 2;
}

.activity-list {
    max-height: 300px;
    overflow-y: auto;
}

.card {
    transition: transform 0.2s ease;
}

.card:hover {
    transform: translateY(-2px);
}
</style>


